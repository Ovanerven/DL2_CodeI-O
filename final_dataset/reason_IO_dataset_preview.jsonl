{"prompt": "You are given a question that requires some input and output variables as follows:\n\nImagine you are waiting at a bus stop where two different buses arrive at regular intervals. One bus arrives every `T2` minutes, and the other bus arrives every `T3` minutes. What is the mean waiting time for any of these buses to arrive?\n\nThe input and output requirements are as follows:\n\nInput:\n  `T2` (float): The interval time (in minutes) for the first bus.\n  `T3` (float): The interval time (in minutes) for the second bus.\n\nOutput:\n  `return` (float): The mean waiting time (in minutes) for any of the two buses.\n\nThe input and output requirements are as follows:\n\nInput:\n  `T2` (float): The interval time (in minutes) for the first bus.\n  `T3` (float): The interval time (in minutes) for the second bus.\n\nOutput:\n  `return` (float): The mean waiting time (in minutes) for any of the two buses.\n\nGiven the following input:\n\n{\n  \"T2\": 20.985669961447094,\n  \"T3\": 5.625268880566673\n}\n\nPlease provide your answer in the following JSON format: {\"output\": <your output>}\n\nYour <your output> should strictly match the output requirement as specified.\n\nTip: Here is a reference code snippet for this question. You can refer to this code to guide your reasoning but not copy spans of code directly.\n\n# import necessary packages\nimport random\n\n# main function\ndef main_solution(T2, T3):\n    # Calculate the mean waiting time for any of the two buses\n    mean_wait = T2 * (7 / 18.0)\n    return mean_wait", "solution": {"output": 8.161093873896093}, "reference_code_length": 8, "task_type": "deductive", "io_pair": {"input": {"T2": 20.985669961447094, "T3": 5.625268880566673}, "output": 8.161093873896093}}
{"prompt": "You are given a question that requires some input and output variables as follows:\n\nGiven a square lattice of size n*n, how many unique paths are there to travel from the top-left corner to the bottom-right corner, moving only right or down at each step?\n\nThe input and output requirements are as follows:\n\nInput:\n  `n` (int): The size of the lattice (n*n). It represents the number of rows and columns in the lattice.\n\nOutput:\n  `return` (int): The number of unique paths from the top-left to the bottom-right of the lattice.\n\nThe input and output requirements are as follows:\n\nInput:\n  `n` (int): The size of the lattice (n*n). It represents the number of rows and columns in the lattice.\n\nOutput:\n  `return` (int): The number of unique paths from the top-left to the bottom-right of the lattice.\n\nGiven the following output:\n\n6\n\nPlease provide your answer in the following JSON format: {\"input\": <your input>}\n\nYour <your input> should be a dictionary, even if the there is only one input variable, with keys strictly match the input variables' names as specified.\n\nTip: Here is a reference code snippet for this question. You can refer to this code to guide your reasoning but not copy spans of code directly.\n\n# import necessary packages\nimport math\n\n# main function\ndef main_solution(n):\n    # Calculate the number of unique paths in an n*n lattice\n    result = (math.factorial(2 * n)) // (math.factorial(n) * math.factorial(n))\n    return result", "solution": {"input": {"n": 2}}, "reference_code_length": 8, "task_type": "abductive", "io_pair": {"input": {"n": 2}, "output": 6}}
{"prompt": "You are given a question that requires some input and output variables as follows:\n\nImagine you have a polygon with `n` vertices, and each vertex has an ant. Each ant can randomly choose to move in either a clockwise or counter-clockwise direction. What is the probability that at least two ants will collide as they move along the sides of the polygon?\n\nThe input and output requirements are as follows:\n\nInput:\n  `n` (int): The number of vertices in the polygon. It should be a positive integer greater than 2.\n\nOutput:\n  `return` (float): The probability of collision between the ants on the vertices of the n-vertex polygon. The value is a float between 0 and 1.\n\nThe input and output requirements are as follows:\n\nInput:\n  `n` (int): The number of vertices in the polygon. It should be a positive integer greater than 2.\n\nOutput:\n  `return` (float): The probability of collision between the ants on the vertices of the n-vertex polygon. The value is a float between 0 and 1.\n\nGiven the following input and output pairs:\n\nExample 1:\nInput: {\n  \"n\": 4\n}\nOutput: 0.875\n\nExample 2:\nInput: {\n  \"n\": 16\n}\nOutput: 0.999969482421875\n\nExample 3:\nInput: {\n  \"n\": 11\n}\nOutput: 0.9990234375\n\nExample 4:\nInput: {\n  \"n\": 5\n}\nOutput: 0.9375\n\n\n\nNow, can you predict the output for the following input?\n\n{\n  \"n\": 6\n}\n\nPlease provide your answer in the following JSON format: {\"output\": <your output>}\n\nYour <your output> should strictly match the output requirement as specified.", "solution": {"output": 0.96875}, "reference_code_length": 9, "task_type": "inductive", "io_pair": {"input": {"n": 6}, "output": 0.96875}}
{"prompt": "You are given a question that requires some input and output variables as follows:\n\nGiven a polygon with `n` vertices, where `n` ants are placed on each vertex, what is the probability that at least two ants will collide if they start walking on the sides of the polygon in random directions?\n\nThe input and output requirements are as follows:\n\nInput:\n  `n` (int): The number of vertices in the polygon and the number of ants. It should be a positive integer greater than 1.\n\nOutput:\n  `return` (float): The probability of collision between any two or all of the ants on the polygon. The value is a float between 0 and 1.\n\nThe input and output requirements are as follows:\n\nInput:\n  `n` (int): The number of vertices in the polygon and the number of ants. It should be a positive integer greater than 1.\n\nOutput:\n  `return` (float): The probability of collision between any two or all of the ants on the polygon. The value is a float between 0 and 1.\n\nGiven the following input:\n\n{\n  \"n\": 5\n}\n\nPlease provide your answer in the following JSON format: {\"output\": <your output>}\n\nYour <your output> should strictly match the output requirement as specified.\n\nTip: Here is a reference code snippet for this question. You can refer to this code to guide your reasoning but not copy spans of code directly.\n\n# import necessary packages\nimport math\n\n# main function\ndef main_solution(n):\n    # Calculate the probability of collision for 'n' ants on an 'n' vertex polygon\n    p_same_direction = (1 / 2) ** (n - 1)\n    p_collision = 1 - p_same_direction\n    return p_collision", "solution": {"output": 0.9375}, "reference_code_length": 9, "task_type": "deductive", "io_pair": {"input": {"n": 5}, "output": 0.9375}}
{"prompt": "You are given a question that requires some input and output variables as follows:\n\nGiven a word, how can we generate all possible unique anagrams of that word?\n\nThe input and output requirements are as follows:\n\nInput:\n  `word` (str): A string representing the input word for which anagrams need to be generated. The length of the word should be less than or equal to 255 characters.\n\nOutput:\n  `return` (list of str): A list of strings where each string is an anagram of the input word. The list contains all possible unique permutations of the input word.\n\nThe input and output requirements are as follows:\n\nInput:\n  `word` (str): A string representing the input word for which anagrams need to be generated. The length of the word should be less than or equal to 255 characters.\n\nOutput:\n  `return` (list of str): A list of strings where each string is an anagram of the input word. The list contains all possible unique permutations of the input word.\n\nGiven the following output:\n\n[\n  \"axi\",\n  \"aix\",\n  \"xai\",\n  \"xia\",\n  \"iax\",\n  \"ixa\"\n]\n\nPlease provide your answer in the following JSON format: {\"input\": <your input>}\n\nYour <your input> should be a dictionary, even if the there is only one input variable, with keys strictly match the input variables' names as specified.\n\nTip: Here is a reference code snippet for this question. You can refer to this code to guide your reasoning but not copy spans of code directly.\n\n# import necessary packages\nimport itertools\n\n# main function\ndef main_solution(word):\n    # Generate all permutations of the input word\n    anagrams = [''.join(p) for p in itertools.permutations(word)]\n    # Convert the list of anagrams to a JSON serializable format (list of strings)\n    return anagrams", "solution": {"input": {"word": "axi"}}, "reference_code_length": 9, "task_type": "abductive", "io_pair": {"input": {"word": "axi"}, "output": ["axi", "aix", "xai", "xia", "iax", "ixa"]}}
