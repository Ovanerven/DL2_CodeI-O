context,reference_code,input_generator,io_pairs,io_prompt
"In a recent project, you are tasked with generating all possible arrangements of distinct integers representing various configurations of product features. Given a list of distinct integers, how can you determine all the unique permutations of these integers? What unique arrangements can be produced from the input variable `nums`? Please return all the possible permutations in the form of a list of lists.

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of distinct integers for which all possible permutations are to be generated.

Output:
  `return` (List[List[int]]): A list of lists, where each inner list represents a unique permutation of the input list.","# import necessary packages
from typing import List

# all class and function definitions in the code file, if any
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        result = []
        if len(nums) == 1:
            return [[nums[0]]]

        for i in range(len(nums)):
            v = nums.pop(0)
            combinations = self.permute(nums)
            for j in range(len(combinations)):
                combinations[j].append(v)
            result.extend(combinations)
            nums.append(v)

        return result

# main function
def main_solution(nums: List[int]) -> List[List[int]]:
    # Validate input
    if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums):
        raise ValueError(""Input must be a list of integers."")
    
    # Create an instance of Solution and call the permute method
    solution_instance = Solution()
    result = solution_instance.permute(nums)
    
    # return, the returned value must be json serializable (no self-defined objects, functions, np.array, set, tuple, etc.)
    return result","import random

def input_generator():
    # Generate a random list of distinct integers
    nums = random.sample(range(-10, 10), k=random.randint(1, 6))  # Random length between 1 and 6
    return {""nums"": nums}","[({'nums': [9, -9, -6, 4]}, [[4, -6, -9, 9], [-6, 4, -9, 9], [-9, 4, -6, 9], [4, -9, -6, 9], [-6, -9, 4, 9], [-9, -6, 4, 9], [9, 4, -6, -9], [4, 9, -6, -9], [-6, 9, 4, -9], [9, -6, 4, -9], [4, -6, 9, -9], [-6, 4, 9, -9], [-9, 9, 4, -6], [9, -9, 4, -6], [4, -9, 9, -6], [-9, 4, 9, -6], [9, 4, -9, -6], [4, 9, -9, -6], [-6, -9, 9, 4], [-9, -6, 9, 4], [9, -6, -9, 4], [-6, 9, -9, 4], [-9, 9, -6, 4], [9, -9, -6, 4]]), ({'nums': [5, -3, -6, -1, 1, 6]}, [[6, 1, -1, -6, -3, 5], [1, 6, -1, -6, -3, 5], [-1, 6, 1, -6, -3, 5], [6, -1, 1, -6, -3, 5], [1, -1, 6, -6, -3, 5], [-1, 1, 6, -6, -3, 5], [-6, 6, 1, -1, -3, 5], [6, -6, 1, -1, -3, 5], [1, -6, 6, -1, -3, 5], [-6, 1, 6, -1, -3, 5], [6, 1, -6, -1, -3, 5], [1, 6, -6, -1, -3, 5], [-1, -6, 6, 1, -3, 5], [-6, -1, 6, 1, -3, 5], [6, -1, -6, 1, -3, 5], [-1, 6, -6, 1, -3, 5], [-6, 6, -1, 1, -3, 5], [6, -6, -1, 1, -3, 5], [1, -1, -6, 6, -3, 5], [-1, 1, -6, 6, -3, 5], [-6, 1, -1, 6, -3, 5], [1, -6, -1, 6, -3, 5], [-1, -6, 1, 6, -3, 5], [-6, -1, 1, 6, -3, 5], [-3, 6, 1, -1, -6, 5], [6, -3, 1, -1, -6, 5], [1, -3, 6, -1, -6, 5], [-3, 1, 6, -1, -6, 5], [6, 1, -3, -1, -6, 5], [1, 6, -3, -1, -6, 5], [-1, -3, 6, 1, -6, 5], [-3, -1, 6, 1, -6, 5], [6, -1, -3, 1, -6, 5], [-1, 6, -3, 1, -6, 5], [-3, 6, -1, 1, -6, 5], [6, -3, -1, 1, -6, 5], [1, -1, -3, 6, -6, 5], [-1, 1, -3, 6, -6, 5], [-3, 1, -1, 6, -6, 5], [1, -3, -1, 6, -6, 5], [-1, -3, 1, 6, -6, 5], [-3, -1, 1, 6, -6, 5], [6, 1, -1, -3, -6, 5], [1, 6, -1, -3, -6, 5], [-1, 6, 1, -3, -6, 5], [6, -1, 1, -3, -6, 5], [1, -1, 6, -3, -6, 5], [-1, 1, 6, -3, -6, 5], [-6, -3, 6, 1, -1, 5], [-3, -6, 6, 1, -1, 5], [6, -6, -3, 1, -1, 5], [-6, 6, -3, 1, -1, 5], [-3, 6, -6, 1, -1, 5], [6, -3, -6, 1, -1, 5], [1, -6, -3, 6, -1, 5], [-6, 1, -3, 6, -1, 5], [-3, 1, -6, 6, -1, 5], [1, -3, -6, 6, -1, 5], [-6, -3, 1, 6, -1, 5], [-3, -6, 1, 6, -1, 5], [6, 1, -6, -3, -1, 5], [1, 6, -6, -3, -1, 5], [-6, 6, 1, -3, -1, 5], [6, -6, 1, -3, -1, 5], [1, -6, 6, -3, -1, 5], [-6, 1, 6, -3, -1, 5], [-3, 6, 1, -6, -1, 5], [6, -3, 1, -6, -1, 5], [1, -3, 6, -6, -1, 5], [-3, 1, 6, -6, -1, 5], [6, 1, -3, -6, -1, 5], [1, 6, -3, -6, -1, 5], [-1, -6, -3, 6, 1, 5], [-6, -1, -3, 6, 1, 5], [-3, -1, -6, 6, 1, 5], [-1, -3, -6, 6, 1, 5], [-6, -3, -1, 6, 1, 5], [-3, -6, -1, 6, 1, 5], [6, -1, -6, -3, 1, 5], [-1, 6, -6, -3, 1, 5], [-6, 6, -1, -3, 1, 5], [6, -6, -1, -3, 1, 5], [-1, -6, 6, -3, 1, 5], [-6, -1, 6, -3, 1, 5], [-3, 6, -1, -6, 1, 5], [6, -3, -1, -6, 1, 5], [-1, -3, 6, -6, 1, 5], [-3, -1, 6, -6, 1, 5], [6, -1, -3, -6, 1, 5], [-1, 6, -3, -6, 1, 5], [-6, -3, 6, -1, 1, 5], [-3, -6, 6, -1, 1, 5], [6, -6, -3, -1, 1, 5], [-6, 6, -3, -1, 1, 5], [-3, 6, -6, -1, 1, 5], [6, -3, -6, -1, 1, 5], [1, -1, -6, -3, 6, 5], [-1, 1, -6, -3, 6, 5], [-6, 1, -1, -3, 6, 5], [1, -6, -1, -3, 6, 5], [-1, -6, 1, -3, 6, 5], [-6, -1, 1, -3, 6, 5], [-3, 1, -1, -6, 6, 5], [1, -3, -1, -6, 6, 5], [-1, -3, 1, -6, 6, 5], [-3, -1, 1, -6, 6, 5], [1, -1, -3, -6, 6, 5], [-1, 1, -3, -6, 6, 5], [-6, -3, 1, -1, 6, 5], [-3, -6, 1, -1, 6, 5], [1, -6, -3, -1, 6, 5], [-6, 1, -3, -1, 6, 5], [-3, 1, -6, -1, 6, 5], [1, -3, -6, -1, 6, 5], [-1, -6, -3, 1, 6, 5], [-6, -1, -3, 1, 6, 5], [-3, -1, -6, 1, 6, 5], [-1, -3, -6, 1, 6, 5], [-6, -3, -1, 1, 6, 5], [-3, -6, -1, 1, 6, 5], [5, 6, 1, -1, -6, -3], [6, 5, 1, -1, -6, -3], [1, 5, 6, -1, -6, -3], [5, 1, 6, -1, -6, -3], [6, 1, 5, -1, -6, -3], [1, 6, 5, -1, -6, -3], [-1, 5, 6, 1, -6, -3], [5, -1, 6, 1, -6, -3], [6, -1, 5, 1, -6, -3], [-1, 6, 5, 1, -6, -3], [5, 6, -1, 1, -6, -3], [6, 5, -1, 1, -6, -3], [1, -1, 5, 6, -6, -3], [-1, 1, 5, 6, -6, -3], [5, 1, -1, 6, -6, -3], [1, 5, -1, 6, -6, -3], [-1, 5, 1, 6, -6, -3], [5, -1, 1, 6, -6, -3], [6, 1, -1, 5, -6, -3], [1, 6, -1, 5, -6, -3], [-1, 6, 1, 5, -6, -3], [6, -1, 1, 5, -6, -3], [1, -1, 6, 5, -6, -3], [-1, 1, 6, 5, -6, -3], [-6, 5, 6, 1, -1, -3], [5, -6, 6, 1, -1, -3], [6, -6, 5, 1, -1, -3], [-6, 6, 5, 1, -1, -3], [5, 6, -6, 1, -1, -3], [6, 5, -6, 1, -1, -3], [1, -6, 5, 6, -1, -3], [-6, 1, 5, 6, -1, -3], [5, 1, -6, 6, -1, -3], [1, 5, -6, 6, -1, -3], [-6, 5, 1, 6, -1, -3], [5, -6, 1, 6, -1, -3], [6, 1, -6, 5, -1, -3], [1, 6, -6, 5, -1, -3], [-6, 6, 1, 5, -1, -3], [6, -6, 1, 5, -1, -3], [1, -6, 6, 5, -1, -3], [-6, 1, 6, 5, -1, -3], [5, 6, 1, -6, -1, -3], [6, 5, 1, -6, -1, -3], [1, 5, 6, -6, -1, -3], [5, 1, 6, -6, -1, -3], [6, 1, 5, -6, -1, -3], [1, 6, 5, -6, -1, -3], [-1, -6, 5, 6, 1, -3], [-6, -1, 5, 6, 1, -3], [5, -1, -6, 6, 1, -3], [-1, 5, -6, 6, 1, -3], [-6, 5, -1, 6, 1, -3], [5, -6, -1, 6, 1, -3], [6, -1, -6, 5, 1, -3], [-1, 6, -6, 5, 1, -3], [-6, 6, -1, 5, 1, -3], [6, -6, -1, 5, 1, -3], [-1, -6, 6, 5, 1, -3], [-6, -1, 6, 5, 1, -3], [5, 6, -1, -6, 1, -3], [6, 5, -1, -6, 1, -3], [-1, 5, 6, -6, 1, -3], [5, -1, 6, -6, 1, -3], [6, -1, 5, -6, 1, -3], [-1, 6, 5, -6, 1, -3], [-6, 5, 6, -1, 1, -3], [5, -6, 6, -1, 1, -3], [6, -6, 5, -1, 1, -3], [-6, 6, 5, -1, 1, -3], [5, 6, -6, -1, 1, -3], [6, 5, -6, -1, 1, -3], [1, -1, -6, 5, 6, -3], [-1, 1, -6, 5, 6, -3], [-6, 1, -1, 5, 6, -3], [1, -6, -1, 5, 6, -3], [-1, -6, 1, 5, 6, -3], [-6, -1, 1, 5, 6, -3], [5, 1, -1, -6, 6, -3], [1, 5, -1, -6, 6, -3], [-1, 5, 1, -6, 6, -3], [5, -1, 1, -6, 6, -3], [1, -1, 5, -6, 6, -3], [-1, 1, 5, -6, 6, -3], [-6, 5, 1, -1, 6, -3], [5, -6, 1, -1, 6, -3], [1, -6, 5, -1, 6, -3], [-6, 1, 5, -1, 6, -3], [5, 1, -6, -1, 6, -3], [1, 5, -6, -1, 6, -3], [-1, -6, 5, 1, 6, -3], [-6, -1, 5, 1, 6, -3], [5, -1, -6, 1, 6, -3], [-1, 5, -6, 1, 6, -3], [-6, 5, -1, 1, 6, -3], [5, -6, -1, 1, 6, -3], [6, 1, -1, -6, 5, -3], [1, 6, -1, -6, 5, -3], [-1, 6, 1, -6, 5, -3], [6, -1, 1, -6, 5, -3], [1, -1, 6, -6, 5, -3], [-1, 1, 6, -6, 5, -3], [-6, 6, 1, -1, 5, -3], [6, -6, 1, -1, 5, -3], [1, -6, 6, -1, 5, -3], [-6, 1, 6, -1, 5, -3], [6, 1, -6, -1, 5, -3], [1, 6, -6, -1, 5, -3], [-1, -6, 6, 1, 5, -3], [-6, -1, 6, 1, 5, -3], [6, -1, -6, 1, 5, -3], [-1, 6, -6, 1, 5, -3], [-6, 6, -1, 1, 5, -3], [6, -6, -1, 1, 5, -3], [1, -1, -6, 6, 5, -3], [-1, 1, -6, 6, 5, -3], [-6, 1, -1, 6, 5, -3], [1, -6, -1, 6, 5, -3], [-1, -6, 1, 6, 5, -3], [-6, -1, 1, 6, 5, -3], [-3, 5, 6, 1, -1, -6], [5, -3, 6, 1, -1, -6], [6, -3, 5, 1, -1, -6], [-3, 6, 5, 1, -1, -6], [5, 6, -3, 1, -1, -6], [6, 5, -3, 1, -1, -6], [1, -3, 5, 6, -1, -6], [-3, 1, 5, 6, -1, -6], [5, 1, -3, 6, -1, -6], [1, 5, -3, 6, -1, -6], [-3, 5, 1, 6, -1, -6], [5, -3, 1, 6, -1, -6], [6, 1, -3, 5, -1, -6], [1, 6, -3, 5, -1, -6], [-3, 6, 1, 5, -1, -6], [6, -3, 1, 5, -1, -6], [1, -3, 6, 5, -1, -6], [-3, 1, 6, 5, -1, -6], [5, 6, 1, -3, -1, -6], [6, 5, 1, -3, -1, -6], [1, 5, 6, -3, -1, -6], [5, 1, 6, -3, -1, -6], [6, 1, 5, -3, -1, -6], [1, 6, 5, -3, -1, -6], [-1, -3, 5, 6, 1, -6], [-3, -1, 5, 6, 1, -6], [5, -1, -3, 6, 1, -6], [-1, 5, -3, 6, 1, -6], [-3, 5, -1, 6, 1, -6], [5, -3, -1, 6, 1, -6], [6, -1, -3, 5, 1, -6], [-1, 6, -3, 5, 1, -6], [-3, 6, -1, 5, 1, -6], [6, -3, -1, 5, 1, -6], [-1, -3, 6, 5, 1, -6], [-3, -1, 6, 5, 1, -6], [5, 6, -1, -3, 1, -6], [6, 5, -1, -3, 1, -6], [-1, 5, 6, -3, 1, -6], [5, -1, 6, -3, 1, -6], [6, -1, 5, -3, 1, -6], [-1, 6, 5, -3, 1, -6], [-3, 5, 6, -1, 1, -6], [5, -3, 6, -1, 1, -6], [6, -3, 5, -1, 1, -6], [-3, 6, 5, -1, 1, -6], [5, 6, -3, -1, 1, -6], [6, 5, -3, -1, 1, -6], [1, -1, -3, 5, 6, -6], [-1, 1, -3, 5, 6, -6], [-3, 1, -1, 5, 6, -6], [1, -3, -1, 5, 6, -6], [-1, -3, 1, 5, 6, -6], [-3, -1, 1, 5, 6, -6], [5, 1, -1, -3, 6, -6], [1, 5, -1, -3, 6, -6], [-1, 5, 1, -3, 6, -6], [5, -1, 1, -3, 6, -6], [1, -1, 5, -3, 6, -6], [-1, 1, 5, -3, 6, -6], [-3, 5, 1, -1, 6, -6], [5, -3, 1, -1, 6, -6], [1, -3, 5, -1, 6, -6], [-3, 1, 5, -1, 6, -6], [5, 1, -3, -1, 6, -6], [1, 5, -3, -1, 6, -6], [-1, -3, 5, 1, 6, -6], [-3, -1, 5, 1, 6, -6], [5, -1, -3, 1, 6, -6], [-1, 5, -3, 1, 6, -6], [-3, 5, -1, 1, 6, -6], [5, -3, -1, 1, 6, -6], [6, 1, -1, -3, 5, -6], [1, 6, -1, -3, 5, -6], [-1, 6, 1, -3, 5, -6], [6, -1, 1, -3, 5, -6], [1, -1, 6, -3, 5, -6], [-1, 1, 6, -3, 5, -6], [-3, 6, 1, -1, 5, -6], [6, -3, 1, -1, 5, -6], [1, -3, 6, -1, 5, -6], [-3, 1, 6, -1, 5, -6], [6, 1, -3, -1, 5, -6], [1, 6, -3, -1, 5, -6], [-1, -3, 6, 1, 5, -6], [-3, -1, 6, 1, 5, -6], [6, -1, -3, 1, 5, -6], [-1, 6, -3, 1, 5, -6], [-3, 6, -1, 1, 5, -6], [6, -3, -1, 1, 5, -6], [1, -1, -3, 6, 5, -6], [-1, 1, -3, 6, 5, -6], [-3, 1, -1, 6, 5, -6], [1, -3, -1, 6, 5, -6], [-1, -3, 1, 6, 5, -6], [-3, -1, 1, 6, 5, -6], [5, 6, 1, -1, -3, -6], [6, 5, 1, -1, -3, -6], [1, 5, 6, -1, -3, -6], [5, 1, 6, -1, -3, -6], [6, 1, 5, -1, -3, -6], [1, 6, 5, -1, -3, -6], [-1, 5, 6, 1, -3, -6], [5, -1, 6, 1, -3, -6], [6, -1, 5, 1, -3, -6], [-1, 6, 5, 1, -3, -6], [5, 6, -1, 1, -3, -6], [6, 5, -1, 1, -3, -6], [1, -1, 5, 6, -3, -6], [-1, 1, 5, 6, -3, -6], [5, 1, -1, 6, -3, -6], [1, 5, -1, 6, -3, -6], [-1, 5, 1, 6, -3, -6], [5, -1, 1, 6, -3, -6], [6, 1, -1, 5, -3, -6], [1, 6, -1, 5, -3, -6], [-1, 6, 1, 5, -3, -6], [6, -1, 1, 5, -3, -6], [1, -1, 6, 5, -3, -6], [-1, 1, 6, 5, -3, -6], [-6, -3, 5, 6, 1, -1], [-3, -6, 5, 6, 1, -1], [5, -6, -3, 6, 1, -1], [-6, 5, -3, 6, 1, -1], [-3, 5, -6, 6, 1, -1], [5, -3, -6, 6, 1, -1], [6, -6, -3, 5, 1, -1], [-6, 6, -3, 5, 1, -1], [-3, 6, -6, 5, 1, -1], [6, -3, -6, 5, 1, -1], [-6, -3, 6, 5, 1, -1], [-3, -6, 6, 5, 1, -1], [5, 6, -6, -3, 1, -1], [6, 5, -6, -3, 1, -1], [-6, 5, 6, -3, 1, -1], [5, -6, 6, -3, 1, -1], [6, -6, 5, -3, 1, -1], [-6, 6, 5, -3, 1, -1], [-3, 5, 6, -6, 1, -1], [5, -3, 6, -6, 1, -1], [6, -3, 5, -6, 1, -1], [-3, 6, 5, -6, 1, -1], [5, 6, -3, -6, 1, -1], [6, 5, -3, -6, 1, -1], [1, -6, -3, 5, 6, -1], [-6, 1, -3, 5, 6, -1], [-3, 1, -6, 5, 6, -1], [1, -3, -6, 5, 6, -1], [-6, -3, 1, 5, 6, -1], [-3, -6, 1, 5, 6, -1], [5, 1, -6, -3, 6, -1], [1, 5, -6, -3, 6, -1], [-6, 5, 1, -3, 6, -1], [5, -6, 1, -3, 6, -1], [1, -6, 5, -3, 6, -1], [-6, 1, 5, -3, 6, -1], [-3, 5, 1, -6, 6, -1], [5, -3, 1, -6, 6, -1], [1, -3, 5, -6, 6, -1], [-3, 1, 5, -6, 6, -1], [5, 1, -3, -6, 6, -1], [1, 5, -3, -6, 6, -1], [-6, -3, 5, 1, 6, -1], [-3, -6, 5, 1, 6, -1], [5, -6, -3, 1, 6, -1], [-6, 5, -3, 1, 6, -1], [-3, 5, -6, 1, 6, -1], [5, -3, -6, 1, 6, -1], [6, 1, -6, -3, 5, -1], [1, 6, -6, -3, 5, -1], [-6, 6, 1, -3, 5, -1], [6, -6, 1, -3, 5, -1], [1, -6, 6, -3, 5, -1], [-6, 1, 6, -3, 5, -1], [-3, 6, 1, -6, 5, -1], [6, -3, 1, -6, 5, -1], [1, -3, 6, -6, 5, -1], [-3, 1, 6, -6, 5, -1], [6, 1, -3, -6, 5, -1], [1, 6, -3, -6, 5, -1], [-6, -3, 6, 1, 5, -1], [-3, -6, 6, 1, 5, -1], [6, -6, -3, 1, 5, -1], [-6, 6, -3, 1, 5, -1], [-3, 6, -6, 1, 5, -1], [6, -3, -6, 1, 5, -1], [1, -6, -3, 6, 5, -1], [-6, 1, -3, 6, 5, -1], [-3, 1, -6, 6, 5, -1], [1, -3, -6, 6, 5, -1], [-6, -3, 1, 6, 5, -1], [-3, -6, 1, 6, 5, -1], [5, 6, 1, -6, -3, -1], [6, 5, 1, -6, -3, -1], [1, 5, 6, -6, -3, -1], [5, 1, 6, -6, -3, -1], [6, 1, 5, -6, -3, -1], [1, 6, 5, -6, -3, -1], [-6, 5, 6, 1, -3, -1], [5, -6, 6, 1, -3, -1], [6, -6, 5, 1, -3, -1], [-6, 6, 5, 1, -3, -1], [5, 6, -6, 1, -3, -1], [6, 5, -6, 1, -3, -1], [1, -6, 5, 6, -3, -1], [-6, 1, 5, 6, -3, -1], [5, 1, -6, 6, -3, -1], [1, 5, -6, 6, -3, -1], [-6, 5, 1, 6, -3, -1], [5, -6, 1, 6, -3, -1], [6, 1, -6, 5, -3, -1], [1, 6, -6, 5, -3, -1], [-6, 6, 1, 5, -3, -1], [6, -6, 1, 5, -3, -1], [1, -6, 6, 5, -3, -1], [-6, 1, 6, 5, -3, -1], [-3, 5, 6, 1, -6, -1], [5, -3, 6, 1, -6, -1], [6, -3, 5, 1, -6, -1], [-3, 6, 5, 1, -6, -1], [5, 6, -3, 1, -6, -1], [6, 5, -3, 1, -6, -1], [1, -3, 5, 6, -6, -1], [-3, 1, 5, 6, -6, -1], [5, 1, -3, 6, -6, -1], [1, 5, -3, 6, -6, -1], [-3, 5, 1, 6, -6, -1], [5, -3, 1, 6, -6, -1], [6, 1, -3, 5, -6, -1], [1, 6, -3, 5, -6, -1], [-3, 6, 1, 5, -6, -1], [6, -3, 1, 5, -6, -1], [1, -3, 6, 5, -6, -1], [-3, 1, 6, 5, -6, -1], [5, 6, 1, -3, -6, -1], [6, 5, 1, -3, -6, -1], [1, 5, 6, -3, -6, -1], [5, 1, 6, -3, -6, -1], [6, 1, 5, -3, -6, -1], [1, 6, 5, -3, -6, -1], [-1, -6, -3, 5, 6, 1], [-6, -1, -3, 5, 6, 1], [-3, -1, -6, 5, 6, 1], [-1, -3, -6, 5, 6, 1], [-6, -3, -1, 5, 6, 1], [-3, -6, -1, 5, 6, 1], [5, -1, -6, -3, 6, 1], [-1, 5, -6, -3, 6, 1], [-6, 5, -1, -3, 6, 1], [5, -6, -1, -3, 6, 1], [-1, -6, 5, -3, 6, 1], [-6, -1, 5, -3, 6, 1], [-3, 5, -1, -6, 6, 1], [5, -3, -1, -6, 6, 1], [-1, -3, 5, -6, 6, 1], [-3, -1, 5, -6, 6, 1], [5, -1, -3, -6, 6, 1], [-1, 5, -3, -6, 6, 1], [-6, -3, 5, -1, 6, 1], [-3, -6, 5, -1, 6, 1], [5, -6, -3, -1, 6, 1], [-6, 5, -3, -1, 6, 1], [-3, 5, -6, -1, 6, 1], [5, -3, -6, -1, 6, 1], [6, -1, -6, -3, 5, 1], [-1, 6, -6, -3, 5, 1], [-6, 6, -1, -3, 5, 1], [6, -6, -1, -3, 5, 1], [-1, -6, 6, -3, 5, 1], [-6, -1, 6, -3, 5, 1], [-3, 6, -1, -6, 5, 1], [6, -3, -1, -6, 5, 1], [-1, -3, 6, -6, 5, 1], [-3, -1, 6, -6, 5, 1], [6, -1, -3, -6, 5, 1], [-1, 6, -3, -6, 5, 1], [-6, -3, 6, -1, 5, 1], [-3, -6, 6, -1, 5, 1], [6, -6, -3, -1, 5, 1], [-6, 6, -3, -1, 5, 1], [-3, 6, -6, -1, 5, 1], [6, -3, -6, -1, 5, 1], [-1, -6, -3, 6, 5, 1], [-6, -1, -3, 6, 5, 1], [-3, -1, -6, 6, 5, 1], [-1, -3, -6, 6, 5, 1], [-6, -3, -1, 6, 5, 1], [-3, -6, -1, 6, 5, 1], [5, 6, -1, -6, -3, 1], [6, 5, -1, -6, -3, 1], [-1, 5, 6, -6, -3, 1], [5, -1, 6, -6, -3, 1], [6, -1, 5, -6, -3, 1], [-1, 6, 5, -6, -3, 1], [-6, 5, 6, -1, -3, 1], [5, -6, 6, -1, -3, 1], [6, -6, 5, -1, -3, 1], [-6, 6, 5, -1, -3, 1], [5, 6, -6, -1, -3, 1], [6, 5, -6, -1, -3, 1], [-1, -6, 5, 6, -3, 1], [-6, -1, 5, 6, -3, 1], [5, -1, -6, 6, -3, 1], [-1, 5, -6, 6, -3, 1], [-6, 5, -1, 6, -3, 1], [5, -6, -1, 6, -3, 1], [6, -1, -6, 5, -3, 1], [-1, 6, -6, 5, -3, 1], [-6, 6, -1, 5, -3, 1], [6, -6, -1, 5, -3, 1], [-1, -6, 6, 5, -3, 1], [-6, -1, 6, 5, -3, 1], [-3, 5, 6, -1, -6, 1], [5, -3, 6, -1, -6, 1], [6, -3, 5, -1, -6, 1], [-3, 6, 5, -1, -6, 1], [5, 6, -3, -1, -6, 1], [6, 5, -3, -1, -6, 1], [-1, -3, 5, 6, -6, 1], [-3, -1, 5, 6, -6, 1], [5, -1, -3, 6, -6, 1], [-1, 5, -3, 6, -6, 1], [-3, 5, -1, 6, -6, 1], [5, -3, -1, 6, -6, 1], [6, -1, -3, 5, -6, 1], [-1, 6, -3, 5, -6, 1], [-3, 6, -1, 5, -6, 1], [6, -3, -1, 5, -6, 1], [-1, -3, 6, 5, -6, 1], [-3, -1, 6, 5, -6, 1], [5, 6, -1, -3, -6, 1], [6, 5, -1, -3, -6, 1], [-1, 5, 6, -3, -6, 1], [5, -1, 6, -3, -6, 1], [6, -1, 5, -3, -6, 1], [-1, 6, 5, -3, -6, 1], [-6, -3, 5, 6, -1, 1], [-3, -6, 5, 6, -1, 1], [5, -6, -3, 6, -1, 1], [-6, 5, -3, 6, -1, 1], [-3, 5, -6, 6, -1, 1], [5, -3, -6, 6, -1, 1], [6, -6, -3, 5, -1, 1], [-6, 6, -3, 5, -1, 1], [-3, 6, -6, 5, -1, 1], [6, -3, -6, 5, -1, 1], [-6, -3, 6, 5, -1, 1], [-3, -6, 6, 5, -1, 1], [5, 6, -6, -3, -1, 1], [6, 5, -6, -3, -1, 1], [-6, 5, 6, -3, -1, 1], [5, -6, 6, -3, -1, 1], [6, -6, 5, -3, -1, 1], [-6, 6, 5, -3, -1, 1], [-3, 5, 6, -6, -1, 1], [5, -3, 6, -6, -1, 1], [6, -3, 5, -6, -1, 1], [-3, 6, 5, -6, -1, 1], [5, 6, -3, -6, -1, 1], [6, 5, -3, -6, -1, 1], [1, -1, -6, -3, 5, 6], [-1, 1, -6, -3, 5, 6], [-6, 1, -1, -3, 5, 6], [1, -6, -1, -3, 5, 6], [-1, -6, 1, -3, 5, 6], [-6, -1, 1, -3, 5, 6], [-3, 1, -1, -6, 5, 6], [1, -3, -1, -6, 5, 6], [-1, -3, 1, -6, 5, 6], [-3, -1, 1, -6, 5, 6], [1, -1, -3, -6, 5, 6], [-1, 1, -3, -6, 5, 6], [-6, -3, 1, -1, 5, 6], [-3, -6, 1, -1, 5, 6], [1, -6, -3, -1, 5, 6], [-6, 1, -3, -1, 5, 6], [-3, 1, -6, -1, 5, 6], [1, -3, -6, -1, 5, 6], [-1, -6, -3, 1, 5, 6], [-6, -1, -3, 1, 5, 6], [-3, -1, -6, 1, 5, 6], [-1, -3, -6, 1, 5, 6], [-6, -3, -1, 1, 5, 6], [-3, -6, -1, 1, 5, 6], [5, 1, -1, -6, -3, 6], [1, 5, -1, -6, -3, 6], [-1, 5, 1, -6, -3, 6], [5, -1, 1, -6, -3, 6], [1, -1, 5, -6, -3, 6], [-1, 1, 5, -6, -3, 6], [-6, 5, 1, -1, -3, 6], [5, -6, 1, -1, -3, 6], [1, -6, 5, -1, -3, 6], [-6, 1, 5, -1, -3, 6], [5, 1, -6, -1, -3, 6], [1, 5, -6, -1, -3, 6], [-1, -6, 5, 1, -3, 6], [-6, -1, 5, 1, -3, 6], [5, -1, -6, 1, -3, 6], [-1, 5, -6, 1, -3, 6], [-6, 5, -1, 1, -3, 6], [5, -6, -1, 1, -3, 6], [1, -1, -6, 5, -3, 6], [-1, 1, -6, 5, -3, 6], [-6, 1, -1, 5, -3, 6], [1, -6, -1, 5, -3, 6], [-1, -6, 1, 5, -3, 6], [-6, -1, 1, 5, -3, 6], [-3, 5, 1, -1, -6, 6], [5, -3, 1, -1, -6, 6], [1, -3, 5, -1, -6, 6], [-3, 1, 5, -1, -6, 6], [5, 1, -3, -1, -6, 6], [1, 5, -3, -1, -6, 6], [-1, -3, 5, 1, -6, 6], [-3, -1, 5, 1, -6, 6], [5, -1, -3, 1, -6, 6], [-1, 5, -3, 1, -6, 6], [-3, 5, -1, 1, -6, 6], [5, -3, -1, 1, -6, 6], [1, -1, -3, 5, -6, 6], [-1, 1, -3, 5, -6, 6], [-3, 1, -1, 5, -6, 6], [1, -3, -1, 5, -6, 6], [-1, -3, 1, 5, -6, 6], [-3, -1, 1, 5, -6, 6], [5, 1, -1, -3, -6, 6], [1, 5, -1, -3, -6, 6], [-1, 5, 1, -3, -6, 6], [5, -1, 1, -3, -6, 6], [1, -1, 5, -3, -6, 6], [-1, 1, 5, -3, -6, 6], [-6, -3, 5, 1, -1, 6], [-3, -6, 5, 1, -1, 6], [5, -6, -3, 1, -1, 6], [-6, 5, -3, 1, -1, 6], [-3, 5, -6, 1, -1, 6], [5, -3, -6, 1, -1, 6], [1, -6, -3, 5, -1, 6], [-6, 1, -3, 5, -1, 6], [-3, 1, -6, 5, -1, 6], [1, -3, -6, 5, -1, 6], [-6, -3, 1, 5, -1, 6], [-3, -6, 1, 5, -1, 6], [5, 1, -6, -3, -1, 6], [1, 5, -6, -3, -1, 6], [-6, 5, 1, -3, -1, 6], [5, -6, 1, -3, -1, 6], [1, -6, 5, -3, -1, 6], [-6, 1, 5, -3, -1, 6], [-3, 5, 1, -6, -1, 6], [5, -3, 1, -6, -1, 6], [1, -3, 5, -6, -1, 6], [-3, 1, 5, -6, -1, 6], [5, 1, -3, -6, -1, 6], [1, 5, -3, -6, -1, 6], [-1, -6, -3, 5, 1, 6], [-6, -1, -3, 5, 1, 6], [-3, -1, -6, 5, 1, 6], [-1, -3, -6, 5, 1, 6], [-6, -3, -1, 5, 1, 6], [-3, -6, -1, 5, 1, 6], [5, -1, -6, -3, 1, 6], [-1, 5, -6, -3, 1, 6], [-6, 5, -1, -3, 1, 6], [5, -6, -1, -3, 1, 6], [-1, -6, 5, -3, 1, 6], [-6, -1, 5, -3, 1, 6], [-3, 5, -1, -6, 1, 6], [5, -3, -1, -6, 1, 6], [-1, -3, 5, -6, 1, 6], [-3, -1, 5, -6, 1, 6], [5, -1, -3, -6, 1, 6], [-1, 5, -3, -6, 1, 6], [-6, -3, 5, -1, 1, 6], [-3, -6, 5, -1, 1, 6], [5, -6, -3, -1, 1, 6], [-6, 5, -3, -1, 1, 6], [-3, 5, -6, -1, 1, 6], [5, -3, -6, -1, 1, 6]]), ({'nums': [-1, 2, -6, 5, -5, 9]}, [[9, -5, 5, -6, 2, -1], [-5, 9, 5, -6, 2, -1], [5, 9, -5, -6, 2, -1], [9, 5, -5, -6, 2, -1], [-5, 5, 9, -6, 2, -1], [5, -5, 9, -6, 2, -1], [-6, 9, -5, 5, 2, -1], [9, -6, -5, 5, 2, -1], [-5, -6, 9, 5, 2, -1], [-6, -5, 9, 5, 2, -1], [9, -5, -6, 5, 2, -1], [-5, 9, -6, 5, 2, -1], [5, -6, 9, -5, 2, -1], [-6, 5, 9, -5, 2, -1], [9, 5, -6, -5, 2, -1], [5, 9, -6, -5, 2, -1], [-6, 9, 5, -5, 2, -1], [9, -6, 5, -5, 2, -1], [-5, 5, -6, 9, 2, -1], [5, -5, -6, 9, 2, -1], [-6, -5, 5, 9, 2, -1], [-5, -6, 5, 9, 2, -1], [5, -6, -5, 9, 2, -1], [-6, 5, -5, 9, 2, -1], [2, 9, -5, 5, -6, -1], [9, 2, -5, 5, -6, -1], [-5, 2, 9, 5, -6, -1], [2, -5, 9, 5, -6, -1], [9, -5, 2, 5, -6, -1], [-5, 9, 2, 5, -6, -1], [5, 2, 9, -5, -6, -1], [2, 5, 9, -5, -6, -1], [9, 5, 2, -5, -6, -1], [5, 9, 2, -5, -6, -1], [2, 9, 5, -5, -6, -1], [9, 2, 5, -5, -6, -1], [-5, 5, 2, 9, -6, -1], [5, -5, 2, 9, -6, -1], [2, -5, 5, 9, -6, -1], [-5, 2, 5, 9, -6, -1], [5, 2, -5, 9, -6, -1], [2, 5, -5, 9, -6, -1], [9, -5, 5, 2, -6, -1], [-5, 9, 5, 2, -6, -1], [5, 9, -5, 2, -6, -1], [9, 5, -5, 2, -6, -1], [-5, 5, 9, 2, -6, -1], [5, -5, 9, 2, -6, -1], [-6, 2, 9, -5, 5, -1], [2, -6, 9, -5, 5, -1], [9, -6, 2, -5, 5, -1], [-6, 9, 2, -5, 5, -1], [2, 9, -6, -5, 5, -1], [9, 2, -6, -5, 5, -1], [-5, -6, 2, 9, 5, -1], [-6, -5, 2, 9, 5, -1], [2, -5, -6, 9, 5, -1], [-5, 2, -6, 9, 5, -1], [-6, 2, -5, 9, 5, -1], [2, -6, -5, 9, 5, -1], [9, -5, -6, 2, 5, -1], [-5, 9, -6, 2, 5, -1], [-6, 9, -5, 2, 5, -1], [9, -6, -5, 2, 5, -1], [-5, -6, 9, 2, 5, -1], [-6, -5, 9, 2, 5, -1], [2, 9, -5, -6, 5, -1], [9, 2, -5, -6, 5, -1], [-5, 2, 9, -6, 5, -1], [2, -5, 9, -6, 5, -1], [9, -5, 2, -6, 5, -1], [-5, 9, 2, -6, 5, -1], [5, -6, 2, 9, -5, -1], [-6, 5, 2, 9, -5, -1], [2, 5, -6, 9, -5, -1], [5, 2, -6, 9, -5, -1], [-6, 2, 5, 9, -5, -1], [2, -6, 5, 9, -5, -1], [9, 5, -6, 2, -5, -1], [5, 9, -6, 2, -5, -1], [-6, 9, 5, 2, -5, -1], [9, -6, 5, 2, -5, -1], [5, -6, 9, 2, -5, -1], [-6, 5, 9, 2, -5, -1], [2, 9, 5, -6, -5, -1], [9, 2, 5, -6, -5, -1], [5, 2, 9, -6, -5, -1], [2, 5, 9, -6, -5, -1], [9, 5, 2, -6, -5, -1], [5, 9, 2, -6, -5, -1], [-6, 2, 9, 5, -5, -1], [2, -6, 9, 5, -5, -1], [9, -6, 2, 5, -5, -1], [-6, 9, 2, 5, -5, -1], [2, 9, -6, 5, -5, -1], [9, 2, -6, 5, -5, -1], [-5, 5, -6, 2, 9, -1], [5, -5, -6, 2, 9, -1], [-6, -5, 5, 2, 9, -1], [-5, -6, 5, 2, 9, -1], [5, -6, -5, 2, 9, -1], [-6, 5, -5, 2, 9, -1], [2, -5, 5, -6, 9, -1], [-5, 2, 5, -6, 9, -1], [5, 2, -5, -6, 9, -1], [2, 5, -5, -6, 9, -1], [-5, 5, 2, -6, 9, -1], [5, -5, 2, -6, 9, -1], [-6, 2, -5, 5, 9, -1], [2, -6, -5, 5, 9, -1], [-5, -6, 2, 5, 9, -1], [-6, -5, 2, 5, 9, -1], [2, -5, -6, 5, 9, -1], [-5, 2, -6, 5, 9, -1], [5, -6, 2, -5, 9, -1], [-6, 5, 2, -5, 9, -1], [2, 5, -6, -5, 9, -1], [5, 2, -6, -5, 9, -1], [-6, 2, 5, -5, 9, -1], [2, -6, 5, -5, 9, -1], [-1, 9, -5, 5, -6, 2], [9, -1, -5, 5, -6, 2], [-5, -1, 9, 5, -6, 2], [-1, -5, 9, 5, -6, 2], [9, -5, -1, 5, -6, 2], [-5, 9, -1, 5, -6, 2], [5, -1, 9, -5, -6, 2], [-1, 5, 9, -5, -6, 2], [9, 5, -1, -5, -6, 2], [5, 9, -1, -5, -6, 2], [-1, 9, 5, -5, -6, 2], [9, -1, 5, -5, -6, 2], [-5, 5, -1, 9, -6, 2], [5, -5, -1, 9, -6, 2], [-1, -5, 5, 9, -6, 2], [-5, -1, 5, 9, -6, 2], [5, -1, -5, 9, -6, 2], [-1, 5, -5, 9, -6, 2], [9, -5, 5, -1, -6, 2], [-5, 9, 5, -1, -6, 2], [5, 9, -5, -1, -6, 2], [9, 5, -5, -1, -6, 2], [-5, 5, 9, -1, -6, 2], [5, -5, 9, -1, -6, 2], [-6, -1, 9, -5, 5, 2], [-1, -6, 9, -5, 5, 2], [9, -6, -1, -5, 5, 2], [-6, 9, -1, -5, 5, 2], [-1, 9, -6, -5, 5, 2], [9, -1, -6, -5, 5, 2], [-5, -6, -1, 9, 5, 2], [-6, -5, -1, 9, 5, 2], [-1, -5, -6, 9, 5, 2], [-5, -1, -6, 9, 5, 2], [-6, -1, -5, 9, 5, 2], [-1, -6, -5, 9, 5, 2], [9, -5, -6, -1, 5, 2], [-5, 9, -6, -1, 5, 2], [-6, 9, -5, -1, 5, 2], [9, -6, -5, -1, 5, 2], [-5, -6, 9, -1, 5, 2], [-6, -5, 9, -1, 5, 2], [-1, 9, -5, -6, 5, 2], [9, -1, -5, -6, 5, 2], [-5, -1, 9, -6, 5, 2], [-1, -5, 9, -6, 5, 2], [9, -5, -1, -6, 5, 2], [-5, 9, -1, -6, 5, 2], [5, -6, -1, 9, -5, 2], [-6, 5, -1, 9, -5, 2], [-1, 5, -6, 9, -5, 2], [5, -1, -6, 9, -5, 2], [-6, -1, 5, 9, -5, 2], [-1, -6, 5, 9, -5, 2], [9, 5, -6, -1, -5, 2], [5, 9, -6, -1, -5, 2], [-6, 9, 5, -1, -5, 2], [9, -6, 5, -1, -5, 2], [5, -6, 9, -1, -5, 2], [-6, 5, 9, -1, -5, 2], [-1, 9, 5, -6, -5, 2], [9, -1, 5, -6, -5, 2], [5, -1, 9, -6, -5, 2], [-1, 5, 9, -6, -5, 2], [9, 5, -1, -6, -5, 2], [5, 9, -1, -6, -5, 2], [-6, -1, 9, 5, -5, 2], [-1, -6, 9, 5, -5, 2], [9, -6, -1, 5, -5, 2], [-6, 9, -1, 5, -5, 2], [-1, 9, -6, 5, -5, 2], [9, -1, -6, 5, -5, 2], [-5, 5, -6, -1, 9, 2], [5, -5, -6, -1, 9, 2], [-6, -5, 5, -1, 9, 2], [-5, -6, 5, -1, 9, 2], [5, -6, -5, -1, 9, 2], [-6, 5, -5, -1, 9, 2], [-1, -5, 5, -6, 9, 2], [-5, -1, 5, -6, 9, 2], [5, -1, -5, -6, 9, 2], [-1, 5, -5, -6, 9, 2], [-5, 5, -1, -6, 9, 2], [5, -5, -1, -6, 9, 2], [-6, -1, -5, 5, 9, 2], [-1, -6, -5, 5, 9, 2], [-5, -6, -1, 5, 9, 2], [-6, -5, -1, 5, 9, 2], [-1, -5, -6, 5, 9, 2], [-5, -1, -6, 5, 9, 2], [5, -6, -1, -5, 9, 2], [-6, 5, -1, -5, 9, 2], [-1, 5, -6, -5, 9, 2], [5, -1, -6, -5, 9, 2], [-6, -1, 5, -5, 9, 2], [-1, -6, 5, -5, 9, 2], [9, -5, 5, -6, -1, 2], [-5, 9, 5, -6, -1, 2], [5, 9, -5, -6, -1, 2], [9, 5, -5, -6, -1, 2], [-5, 5, 9, -6, -1, 2], [5, -5, 9, -6, -1, 2], [-6, 9, -5, 5, -1, 2], [9, -6, -5, 5, -1, 2], [-5, -6, 9, 5, -1, 2], [-6, -5, 9, 5, -1, 2], [9, -5, -6, 5, -1, 2], [-5, 9, -6, 5, -1, 2], [5, -6, 9, -5, -1, 2], [-6, 5, 9, -5, -1, 2], [9, 5, -6, -5, -1, 2], [5, 9, -6, -5, -1, 2], [-6, 9, 5, -5, -1, 2], [9, -6, 5, -5, -1, 2], [-5, 5, -6, 9, -1, 2], [5, -5, -6, 9, -1, 2], [-6, -5, 5, 9, -1, 2], [-5, -6, 5, 9, -1, 2], [5, -6, -5, 9, -1, 2], [-6, 5, -5, 9, -1, 2], [2, -1, 9, -5, 5, -6], [-1, 2, 9, -5, 5, -6], [9, 2, -1, -5, 5, -6], [2, 9, -1, -5, 5, -6], [-1, 9, 2, -5, 5, -6], [9, -1, 2, -5, 5, -6], [-5, 2, -1, 9, 5, -6], [2, -5, -1, 9, 5, -6], [-1, -5, 2, 9, 5, -6], [-5, -1, 2, 9, 5, -6], [2, -1, -5, 9, 5, -6], [-1, 2, -5, 9, 5, -6], [9, -5, 2, -1, 5, -6], [-5, 9, 2, -1, 5, -6], [2, 9, -5, -1, 5, -6], [9, 2, -5, -1, 5, -6], [-5, 2, 9, -1, 5, -6], [2, -5, 9, -1, 5, -6], [-1, 9, -5, 2, 5, -6], [9, -1, -5, 2, 5, -6], [-5, -1, 9, 2, 5, -6], [-1, -5, 9, 2, 5, -6], [9, -5, -1, 2, 5, -6], [-5, 9, -1, 2, 5, -6], [5, 2, -1, 9, -5, -6], [2, 5, -1, 9, -5, -6], [-1, 5, 2, 9, -5, -6], [5, -1, 2, 9, -5, -6], [2, -1, 5, 9, -5, -6], [-1, 2, 5, 9, -5, -6], [9, 5, 2, -1, -5, -6], [5, 9, 2, -1, -5, -6], [2, 9, 5, -1, -5, -6], [9, 2, 5, -1, -5, -6], [5, 2, 9, -1, -5, -6], [2, 5, 9, -1, -5, -6], [-1, 9, 5, 2, -5, -6], [9, -1, 5, 2, -5, -6], [5, -1, 9, 2, -5, -6], [-1, 5, 9, 2, -5, -6], [9, 5, -1, 2, -5, -6], [5, 9, -1, 2, -5, -6], [2, -1, 9, 5, -5, -6], [-1, 2, 9, 5, -5, -6], [9, 2, -1, 5, -5, -6], [2, 9, -1, 5, -5, -6], [-1, 9, 2, 5, -5, -6], [9, -1, 2, 5, -5, -6], [-5, 5, 2, -1, 9, -6], [5, -5, 2, -1, 9, -6], [2, -5, 5, -1, 9, -6], [-5, 2, 5, -1, 9, -6], [5, 2, -5, -1, 9, -6], [2, 5, -5, -1, 9, -6], [-1, -5, 5, 2, 9, -6], [-5, -1, 5, 2, 9, -6], [5, -1, -5, 2, 9, -6], [-1, 5, -5, 2, 9, -6], [-5, 5, -1, 2, 9, -6], [5, -5, -1, 2, 9, -6], [2, -1, -5, 5, 9, -6], [-1, 2, -5, 5, 9, -6], [-5, 2, -1, 5, 9, -6], [2, -5, -1, 5, 9, -6], [-1, -5, 2, 5, 9, -6], [-5, -1, 2, 5, 9, -6], [5, 2, -1, -5, 9, -6], [2, 5, -1, -5, 9, -6], [-1, 5, 2, -5, 9, -6], [5, -1, 2, -5, 9, -6], [2, -1, 5, -5, 9, -6], [-1, 2, 5, -5, 9, -6], [9, -5, 5, 2, -1, -6], [-5, 9, 5, 2, -1, -6], [5, 9, -5, 2, -1, -6], [9, 5, -5, 2, -1, -6], [-5, 5, 9, 2, -1, -6], [5, -5, 9, 2, -1, -6], [2, 9, -5, 5, -1, -6], [9, 2, -5, 5, -1, -6], [-5, 2, 9, 5, -1, -6], [2, -5, 9, 5, -1, -6], [9, -5, 2, 5, -1, -6], [-5, 9, 2, 5, -1, -6], [5, 2, 9, -5, -1, -6], [2, 5, 9, -5, -1, -6], [9, 5, 2, -5, -1, -6], [5, 9, 2, -5, -1, -6], [2, 9, 5, -5, -1, -6], [9, 2, 5, -5, -1, -6], [-5, 5, 2, 9, -1, -6], [5, -5, 2, 9, -1, -6], [2, -5, 5, 9, -1, -6], [-5, 2, 5, 9, -1, -6], [5, 2, -5, 9, -1, -6], [2, 5, -5, 9, -1, -6], [-1, 9, -5, 5, 2, -6], [9, -1, -5, 5, 2, -6], [-5, -1, 9, 5, 2, -6], [-1, -5, 9, 5, 2, -6], [9, -5, -1, 5, 2, -6], [-5, 9, -1, 5, 2, -6], [5, -1, 9, -5, 2, -6], [-1, 5, 9, -5, 2, -6], [9, 5, -1, -5, 2, -6], [5, 9, -1, -5, 2, -6], [-1, 9, 5, -5, 2, -6], [9, -1, 5, -5, 2, -6], [-5, 5, -1, 9, 2, -6], [5, -5, -1, 9, 2, -6], [-1, -5, 5, 9, 2, -6], [-5, -1, 5, 9, 2, -6], [5, -1, -5, 9, 2, -6], [-1, 5, -5, 9, 2, -6], [9, -5, 5, -1, 2, -6], [-5, 9, 5, -1, 2, -6], [5, 9, -5, -1, 2, -6], [9, 5, -5, -1, 2, -6], [-5, 5, 9, -1, 2, -6], [5, -5, 9, -1, 2, -6], [-6, 2, -1, 9, -5, 5], [2, -6, -1, 9, -5, 5], [-1, -6, 2, 9, -5, 5], [-6, -1, 2, 9, -5, 5], [2, -1, -6, 9, -5, 5], [-1, 2, -6, 9, -5, 5], [9, -6, 2, -1, -5, 5], [-6, 9, 2, -1, -5, 5], [2, 9, -6, -1, -5, 5], [9, 2, -6, -1, -5, 5], [-6, 2, 9, -1, -5, 5], [2, -6, 9, -1, -5, 5], [-1, 9, -6, 2, -5, 5], [9, -1, -6, 2, -5, 5], [-6, -1, 9, 2, -5, 5], [-1, -6, 9, 2, -5, 5], [9, -6, -1, 2, -5, 5], [-6, 9, -1, 2, -5, 5], [2, -1, 9, -6, -5, 5], [-1, 2, 9, -6, -5, 5], [9, 2, -1, -6, -5, 5], [2, 9, -1, -6, -5, 5], [-1, 9, 2, -6, -5, 5], [9, -1, 2, -6, -5, 5], [-5, -6, 2, -1, 9, 5], [-6, -5, 2, -1, 9, 5], [2, -5, -6, -1, 9, 5], [-5, 2, -6, -1, 9, 5], [-6, 2, -5, -1, 9, 5], [2, -6, -5, -1, 9, 5], [-1, -5, -6, 2, 9, 5], [-5, -1, -6, 2, 9, 5], [-6, -1, -5, 2, 9, 5], [-1, -6, -5, 2, 9, 5], [-5, -6, -1, 2, 9, 5], [-6, -5, -1, 2, 9, 5], [2, -1, -5, -6, 9, 5], [-1, 2, -5, -6, 9, 5], [-5, 2, -1, -6, 9, 5], [2, -5, -1, -6, 9, 5], [-1, -5, 2, -6, 9, 5], [-5, -1, 2, -6, 9, 5], [-6, 2, -1, -5, 9, 5], [2, -6, -1, -5, 9, 5], [-1, -6, 2, -5, 9, 5], [-6, -1, 2, -5, 9, 5], [2, -1, -6, -5, 9, 5], [-1, 2, -6, -5, 9, 5], [9, -5, -6, 2, -1, 5], [-5, 9, -6, 2, -1, 5], [-6, 9, -5, 2, -1, 5], [9, -6, -5, 2, -1, 5], [-5, -6, 9, 2, -1, 5], [-6, -5, 9, 2, -1, 5], [2, 9, -5, -6, -1, 5], [9, 2, -5, -6, -1, 5], [-5, 2, 9, -6, -1, 5], [2, -5, 9, -6, -1, 5], [9, -5, 2, -6, -1, 5], [-5, 9, 2, -6, -1, 5], [-6, 2, 9, -5, -1, 5], [2, -6, 9, -5, -1, 5], [9, -6, 2, -5, -1, 5], [-6, 9, 2, -5, -1, 5], [2, 9, -6, -5, -1, 5], [9, 2, -6, -5, -1, 5], [-5, -6, 2, 9, -1, 5], [-6, -5, 2, 9, -1, 5], [2, -5, -6, 9, -1, 5], [-5, 2, -6, 9, -1, 5], [-6, 2, -5, 9, -1, 5], [2, -6, -5, 9, -1, 5], [-1, 9, -5, -6, 2, 5], [9, -1, -5, -6, 2, 5], [-5, -1, 9, -6, 2, 5], [-1, -5, 9, -6, 2, 5], [9, -5, -1, -6, 2, 5], [-5, 9, -1, -6, 2, 5], [-6, -1, 9, -5, 2, 5], [-1, -6, 9, -5, 2, 5], [9, -6, -1, -5, 2, 5], [-6, 9, -1, -5, 2, 5], [-1, 9, -6, -5, 2, 5], [9, -1, -6, -5, 2, 5], [-5, -6, -1, 9, 2, 5], [-6, -5, -1, 9, 2, 5], [-1, -5, -6, 9, 2, 5], [-5, -1, -6, 9, 2, 5], [-6, -1, -5, 9, 2, 5], [-1, -6, -5, 9, 2, 5], [9, -5, -6, -1, 2, 5], [-5, 9, -6, -1, 2, 5], [-6, 9, -5, -1, 2, 5], [9, -6, -5, -1, 2, 5], [-5, -6, 9, -1, 2, 5], [-6, -5, 9, -1, 2, 5], [2, -1, 9, -5, -6, 5], [-1, 2, 9, -5, -6, 5], [9, 2, -1, -5, -6, 5], [2, 9, -1, -5, -6, 5], [-1, 9, 2, -5, -6, 5], [9, -1, 2, -5, -6, 5], [-5, 2, -1, 9, -6, 5], [2, -5, -1, 9, -6, 5], [-1, -5, 2, 9, -6, 5], [-5, -1, 2, 9, -6, 5], [2, -1, -5, 9, -6, 5], [-1, 2, -5, 9, -6, 5], [9, -5, 2, -1, -6, 5], [-5, 9, 2, -1, -6, 5], [2, 9, -5, -1, -6, 5], [9, 2, -5, -1, -6, 5], [-5, 2, 9, -1, -6, 5], [2, -5, 9, -1, -6, 5], [-1, 9, -5, 2, -6, 5], [9, -1, -5, 2, -6, 5], [-5, -1, 9, 2, -6, 5], [-1, -5, 9, 2, -6, 5], [9, -5, -1, 2, -6, 5], [-5, 9, -1, 2, -6, 5], [5, -6, 2, -1, 9, -5], [-6, 5, 2, -1, 9, -5], [2, 5, -6, -1, 9, -5], [5, 2, -6, -1, 9, -5], [-6, 2, 5, -1, 9, -5], [2, -6, 5, -1, 9, -5], [-1, 5, -6, 2, 9, -5], [5, -1, -6, 2, 9, -5], [-6, -1, 5, 2, 9, -5], [-1, -6, 5, 2, 9, -5], [5, -6, -1, 2, 9, -5], [-6, 5, -1, 2, 9, -5], [2, -1, 5, -6, 9, -5], [-1, 2, 5, -6, 9, -5], [5, 2, -1, -6, 9, -5], [2, 5, -1, -6, 9, -5], [-1, 5, 2, -6, 9, -5], [5, -1, 2, -6, 9, -5], [-6, 2, -1, 5, 9, -5], [2, -6, -1, 5, 9, -5], [-1, -6, 2, 5, 9, -5], [-6, -1, 2, 5, 9, -5], [2, -1, -6, 5, 9, -5], [-1, 2, -6, 5, 9, -5], [9, 5, -6, 2, -1, -5], [5, 9, -6, 2, -1, -5], [-6, 9, 5, 2, -1, -5], [9, -6, 5, 2, -1, -5], [5, -6, 9, 2, -1, -5], [-6, 5, 9, 2, -1, -5], [2, 9, 5, -6, -1, -5], [9, 2, 5, -6, -1, -5], [5, 2, 9, -6, -1, -5], [2, 5, 9, -6, -1, -5], [9, 5, 2, -6, -1, -5], [5, 9, 2, -6, -1, -5], [-6, 2, 9, 5, -1, -5], [2, -6, 9, 5, -1, -5], [9, -6, 2, 5, -1, -5], [-6, 9, 2, 5, -1, -5], [2, 9, -6, 5, -1, -5], [9, 2, -6, 5, -1, -5], [5, -6, 2, 9, -1, -5], [-6, 5, 2, 9, -1, -5], [2, 5, -6, 9, -1, -5], [5, 2, -6, 9, -1, -5], [-6, 2, 5, 9, -1, -5], [2, -6, 5, 9, -1, -5], [-1, 9, 5, -6, 2, -5], [9, -1, 5, -6, 2, -5], [5, -1, 9, -6, 2, -5], [-1, 5, 9, -6, 2, -5], [9, 5, -1, -6, 2, -5], [5, 9, -1, -6, 2, -5], [-6, -1, 9, 5, 2, -5], [-1, -6, 9, 5, 2, -5], [9, -6, -1, 5, 2, -5], [-6, 9, -1, 5, 2, -5], [-1, 9, -6, 5, 2, -5], [9, -1, -6, 5, 2, -5], [5, -6, -1, 9, 2, -5], [-6, 5, -1, 9, 2, -5], [-1, 5, -6, 9, 2, -5], [5, -1, -6, 9, 2, -5], [-6, -1, 5, 9, 2, -5], [-1, -6, 5, 9, 2, -5], [9, 5, -6, -1, 2, -5], [5, 9, -6, -1, 2, -5], [-6, 9, 5, -1, 2, -5], [9, -6, 5, -1, 2, -5], [5, -6, 9, -1, 2, -5], [-6, 5, 9, -1, 2, -5], [2, -1, 9, 5, -6, -5], [-1, 2, 9, 5, -6, -5], [9, 2, -1, 5, -6, -5], [2, 9, -1, 5, -6, -5], [-1, 9, 2, 5, -6, -5], [9, -1, 2, 5, -6, -5], [5, 2, -1, 9, -6, -5], [2, 5, -1, 9, -6, -5], [-1, 5, 2, 9, -6, -5], [5, -1, 2, 9, -6, -5], [2, -1, 5, 9, -6, -5], [-1, 2, 5, 9, -6, -5], [9, 5, 2, -1, -6, -5], [5, 9, 2, -1, -6, -5], [2, 9, 5, -1, -6, -5], [9, 2, 5, -1, -6, -5], [5, 2, 9, -1, -6, -5], [2, 5, 9, -1, -6, -5], [-1, 9, 5, 2, -6, -5], [9, -1, 5, 2, -6, -5], [5, -1, 9, 2, -6, -5], [-1, 5, 9, 2, -6, -5], [9, 5, -1, 2, -6, -5], [5, 9, -1, 2, -6, -5], [-6, 2, -1, 9, 5, -5], [2, -6, -1, 9, 5, -5], [-1, -6, 2, 9, 5, -5], [-6, -1, 2, 9, 5, -5], [2, -1, -6, 9, 5, -5], [-1, 2, -6, 9, 5, -5], [9, -6, 2, -1, 5, -5], [-6, 9, 2, -1, 5, -5], [2, 9, -6, -1, 5, -5], [9, 2, -6, -1, 5, -5], [-6, 2, 9, -1, 5, -5], [2, -6, 9, -1, 5, -5], [-1, 9, -6, 2, 5, -5], [9, -1, -6, 2, 5, -5], [-6, -1, 9, 2, 5, -5], [-1, -6, 9, 2, 5, -5], [9, -6, -1, 2, 5, -5], [-6, 9, -1, 2, 5, -5], [2, -1, 9, -6, 5, -5], [-1, 2, 9, -6, 5, -5], [9, 2, -1, -6, 5, -5], [2, 9, -1, -6, 5, -5], [-1, 9, 2, -6, 5, -5], [9, -1, 2, -6, 5, -5], [-5, 5, -6, 2, -1, 9], [5, -5, -6, 2, -1, 9], [-6, -5, 5, 2, -1, 9], [-5, -6, 5, 2, -1, 9], [5, -6, -5, 2, -1, 9], [-6, 5, -5, 2, -1, 9], [2, -5, 5, -6, -1, 9], [-5, 2, 5, -6, -1, 9], [5, 2, -5, -6, -1, 9], [2, 5, -5, -6, -1, 9], [-5, 5, 2, -6, -1, 9], [5, -5, 2, -6, -1, 9], [-6, 2, -5, 5, -1, 9], [2, -6, -5, 5, -1, 9], [-5, -6, 2, 5, -1, 9], [-6, -5, 2, 5, -1, 9], [2, -5, -6, 5, -1, 9], [-5, 2, -6, 5, -1, 9], [5, -6, 2, -5, -1, 9], [-6, 5, 2, -5, -1, 9], [2, 5, -6, -5, -1, 9], [5, 2, -6, -5, -1, 9], [-6, 2, 5, -5, -1, 9], [2, -6, 5, -5, -1, 9], [-1, -5, 5, -6, 2, 9], [-5, -1, 5, -6, 2, 9], [5, -1, -5, -6, 2, 9], [-1, 5, -5, -6, 2, 9], [-5, 5, -1, -6, 2, 9], [5, -5, -1, -6, 2, 9], [-6, -1, -5, 5, 2, 9], [-1, -6, -5, 5, 2, 9], [-5, -6, -1, 5, 2, 9], [-6, -5, -1, 5, 2, 9], [-1, -5, -6, 5, 2, 9], [-5, -1, -6, 5, 2, 9], [5, -6, -1, -5, 2, 9], [-6, 5, -1, -5, 2, 9], [-1, 5, -6, -5, 2, 9], [5, -1, -6, -5, 2, 9], [-6, -1, 5, -5, 2, 9], [-1, -6, 5, -5, 2, 9], [-5, 5, -6, -1, 2, 9], [5, -5, -6, -1, 2, 9], [-6, -5, 5, -1, 2, 9], [-5, -6, 5, -1, 2, 9], [5, -6, -5, -1, 2, 9], [-6, 5, -5, -1, 2, 9], [2, -1, -5, 5, -6, 9], [-1, 2, -5, 5, -6, 9], [-5, 2, -1, 5, -6, 9], [2, -5, -1, 5, -6, 9], [-1, -5, 2, 5, -6, 9], [-5, -1, 2, 5, -6, 9], [5, 2, -1, -5, -6, 9], [2, 5, -1, -5, -6, 9], [-1, 5, 2, -5, -6, 9], [5, -1, 2, -5, -6, 9], [2, -1, 5, -5, -6, 9], [-1, 2, 5, -5, -6, 9], [-5, 5, 2, -1, -6, 9], [5, -5, 2, -1, -6, 9], [2, -5, 5, -1, -6, 9], [-5, 2, 5, -1, -6, 9], [5, 2, -5, -1, -6, 9], [2, 5, -5, -1, -6, 9], [-1, -5, 5, 2, -6, 9], [-5, -1, 5, 2, -6, 9], [5, -1, -5, 2, -6, 9], [-1, 5, -5, 2, -6, 9], [-5, 5, -1, 2, -6, 9], [5, -5, -1, 2, -6, 9], [-6, 2, -1, -5, 5, 9], [2, -6, -1, -5, 5, 9], [-1, -6, 2, -5, 5, 9], [-6, -1, 2, -5, 5, 9], [2, -1, -6, -5, 5, 9], [-1, 2, -6, -5, 5, 9], [-5, -6, 2, -1, 5, 9], [-6, -5, 2, -1, 5, 9], [2, -5, -6, -1, 5, 9], [-5, 2, -6, -1, 5, 9], [-6, 2, -5, -1, 5, 9], [2, -6, -5, -1, 5, 9], [-1, -5, -6, 2, 5, 9], [-5, -1, -6, 2, 5, 9], [-6, -1, -5, 2, 5, 9], [-1, -6, -5, 2, 5, 9], [-5, -6, -1, 2, 5, 9], [-6, -5, -1, 2, 5, 9], [2, -1, -5, -6, 5, 9], [-1, 2, -5, -6, 5, 9], [-5, 2, -1, -6, 5, 9], [2, -5, -1, -6, 5, 9], [-1, -5, 2, -6, 5, 9], [-5, -1, 2, -6, 5, 9], [5, -6, 2, -1, -5, 9], [-6, 5, 2, -1, -5, 9], [2, 5, -6, -1, -5, 9], [5, 2, -6, -1, -5, 9], [-6, 2, 5, -1, -5, 9], [2, -6, 5, -1, -5, 9], [-1, 5, -6, 2, -5, 9], [5, -1, -6, 2, -5, 9], [-6, -1, 5, 2, -5, 9], [-1, -6, 5, 2, -5, 9], [5, -6, -1, 2, -5, 9], [-6, 5, -1, 2, -5, 9], [2, -1, 5, -6, -5, 9], [-1, 2, 5, -6, -5, 9], [5, 2, -1, -6, -5, 9], [2, 5, -1, -6, -5, 9], [-1, 5, 2, -6, -5, 9], [5, -1, 2, -6, -5, 9], [-6, 2, -1, 5, -5, 9], [2, -6, -1, 5, -5, 9], [-1, -6, 2, 5, -5, 9], [-6, -1, 2, 5, -5, 9], [2, -1, -6, 5, -5, 9], [-1, 2, -6, 5, -5, 9]]), ({'nums': [-4, -7, 7, 0]}, [[0, 7, -7, -4], [7, 0, -7, -4], [-7, 0, 7, -4], [0, -7, 7, -4], [7, -7, 0, -4], [-7, 7, 0, -4], [-4, 0, 7, -7], [0, -4, 7, -7], [7, -4, 0, -7], [-4, 7, 0, -7], [0, 7, -4, -7], [7, 0, -4, -7], [-7, -4, 0, 7], [-4, -7, 0, 7], [0, -7, -4, 7], [-7, 0, -4, 7], [-4, 0, -7, 7], [0, -4, -7, 7], [7, -7, -4, 0], [-7, 7, -4, 0], [-4, 7, -7, 0], [7, -4, -7, 0], [-7, -4, 7, 0], [-4, -7, 7, 0]]), ({'nums': [-3, 8, 5, 6, 7]}, [[7, 6, 5, 8, -3], [6, 7, 5, 8, -3], [5, 7, 6, 8, -3], [7, 5, 6, 8, -3], [6, 5, 7, 8, -3], [5, 6, 7, 8, -3], [8, 7, 6, 5, -3], [7, 8, 6, 5, -3], [6, 8, 7, 5, -3], [8, 6, 7, 5, -3], [7, 6, 8, 5, -3], [6, 7, 8, 5, -3], [5, 8, 7, 6, -3], [8, 5, 7, 6, -3], [7, 5, 8, 6, -3], [5, 7, 8, 6, -3], [8, 7, 5, 6, -3], [7, 8, 5, 6, -3], [6, 5, 8, 7, -3], [5, 6, 8, 7, -3], [8, 6, 5, 7, -3], [6, 8, 5, 7, -3], [5, 8, 6, 7, -3], [8, 5, 6, 7, -3], [-3, 7, 6, 5, 8], [7, -3, 6, 5, 8], [6, -3, 7, 5, 8], [-3, 6, 7, 5, 8], [7, 6, -3, 5, 8], [6, 7, -3, 5, 8], [5, -3, 7, 6, 8], [-3, 5, 7, 6, 8], [7, 5, -3, 6, 8], [5, 7, -3, 6, 8], [-3, 7, 5, 6, 8], [7, -3, 5, 6, 8], [6, 5, -3, 7, 8], [5, 6, -3, 7, 8], [-3, 6, 5, 7, 8], [6, -3, 5, 7, 8], [5, -3, 6, 7, 8], [-3, 5, 6, 7, 8], [7, 6, 5, -3, 8], [6, 7, 5, -3, 8], [5, 7, 6, -3, 8], [7, 5, 6, -3, 8], [6, 5, 7, -3, 8], [5, 6, 7, -3, 8], [8, -3, 7, 6, 5], [-3, 8, 7, 6, 5], [7, 8, -3, 6, 5], [8, 7, -3, 6, 5], [-3, 7, 8, 6, 5], [7, -3, 8, 6, 5], [6, 8, -3, 7, 5], [8, 6, -3, 7, 5], [-3, 6, 8, 7, 5], [6, -3, 8, 7, 5], [8, -3, 6, 7, 5], [-3, 8, 6, 7, 5], [7, 6, 8, -3, 5], [6, 7, 8, -3, 5], [8, 7, 6, -3, 5], [7, 8, 6, -3, 5], [6, 8, 7, -3, 5], [8, 6, 7, -3, 5], [-3, 7, 6, 8, 5], [7, -3, 6, 8, 5], [6, -3, 7, 8, 5], [-3, 6, 7, 8, 5], [7, 6, -3, 8, 5], [6, 7, -3, 8, 5], [5, 8, -3, 7, 6], [8, 5, -3, 7, 6], [-3, 5, 8, 7, 6], [5, -3, 8, 7, 6], [8, -3, 5, 7, 6], [-3, 8, 5, 7, 6], [7, 5, 8, -3, 6], [5, 7, 8, -3, 6], [8, 7, 5, -3, 6], [7, 8, 5, -3, 6], [5, 8, 7, -3, 6], [8, 5, 7, -3, 6], [-3, 7, 5, 8, 6], [7, -3, 5, 8, 6], [5, -3, 7, 8, 6], [-3, 5, 7, 8, 6], [7, 5, -3, 8, 6], [5, 7, -3, 8, 6], [8, -3, 7, 5, 6], [-3, 8, 7, 5, 6], [7, 8, -3, 5, 6], [8, 7, -3, 5, 6], [-3, 7, 8, 5, 6], [7, -3, 8, 5, 6], [6, 5, 8, -3, 7], [5, 6, 8, -3, 7], [8, 6, 5, -3, 7], [6, 8, 5, -3, 7], [5, 8, 6, -3, 7], [8, 5, 6, -3, 7], [-3, 6, 5, 8, 7], [6, -3, 5, 8, 7], [5, -3, 6, 8, 7], [-3, 5, 6, 8, 7], [6, 5, -3, 8, 7], [5, 6, -3, 8, 7], [8, -3, 6, 5, 7], [-3, 8, 6, 5, 7], [6, 8, -3, 5, 7], [8, 6, -3, 5, 7], [-3, 6, 8, 5, 7], [6, -3, 8, 5, 7], [5, 8, -3, 6, 7], [8, 5, -3, 6, 7], [-3, 5, 8, 6, 7], [5, -3, 8, 6, 7], [8, -3, 5, 6, 7], [-3, 8, 5, 6, 7]])]","In a recent project, you are tasked with generating all possible arrangements of distinct integers representing various configurations of product features. Given a list of distinct integers, how can you determine all the unique permutations of these integers? What unique arrangements can be produced from the input variable `nums`? Please return all the possible permutations in the form of a list of lists.

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of distinct integers for which all possible permutations are to be generated.

Output:
  `return` (List[List[int]]): A list of lists, where each inner list represents a unique permutation of the input list.

Examples:
Input: {""nums"": [9, -9, -6, 4]}
Output: [[4, -6, -9, 9], [-6, 4, -9, 9], [-9, 4, -6, 9], [4, -9, -6, 9], [-6, -9, 4, 9], [-9, -6, 4, 9], [9, 4, -6, -9], [4, 9, -6, -9], [-6, 9, 4, -9], [9, -6, 4, -9], [4, -6, 9, -9], [-6, 4, 9, -9], [-9, 9, 4, -6], [9, -9, 4, -6], [4, -9, 9, -6], [-9, 4, 9, -6], [9, 4, -9, -6], [4, 9, -9, -6], [-6, -9, 9, 4], [-9, -6, 9, 4], [9, -6, -9, 4], [-6, 9, -9, 4], [-9, 9, -6, 4], [9, -9, -6, 4]]
Input: {""nums"": [5, -3, -6, -1, 1, 6]}
Output: [[6, 1, -1, -6, -3, 5], [1, 6, -1, -6, -3, 5], [-1, 6, 1, -6, -3, 5], [6, -1, 1, -6, -3, 5], [1, -1, 6, -6, -3, 5], [-1, 1, 6, -6, -3, 5], [-6, 6, 1, -1, -3, 5], [6, -6, 1, -1, -3, 5], [1, -6, 6, -1, -3, 5], [-6, 1, 6, -1, -3, 5], [6, 1, -6, -1, -3, 5], [1, 6, -6, -1, -3, 5], [-1, -6, 6, 1, -3, 5], [-6, -1, 6, 1, -3, 5], [6, -1, -6, 1, -3, 5], [-1, 6, -6, 1, -3, 5], [-6, 6, -1, 1, -3, 5], [6, -6, -1, 1, -3, 5], [1, -1, -6, 6, -3, 5], [-1, 1, -6, 6, -3, 5], [-6, 1, -1, 6, -3, 5], [1, -6, -1, 6, -3, 5], [-1, -6, 1, 6, -3, 5], [-6, -1, 1, 6, -3, 5], [-3, 6, 1, -1, -6, 5], [6, -3, 1, -1, -6, 5], [1, -3, 6, -1, -6, 5], [-3, 1, 6, -1, -6, 5], [6, 1, -3, -1, -6, 5], [1, 6, -3, -1, -6, 5], [-1, -3, 6, 1, -6, 5], [-3, -1, 6, 1, -6, 5], [6, -1, -3, 1, -6, 5], [-1, 6, -3, 1, -6, 5], [-3, 6, -1, 1, -6, 5], [6, -3, -1, 1, -6, 5], [1, -1, -3, 6, -6, 5], [-1, 1, -3, 6, -6, 5], [-3, 1, -1, 6, -6, 5], [1, -3, -1, 6, -6, 5], [-1, -3, 1, 6, -6, 5], [-3, -1, 1, 6, -6, 5], [6, 1, -1, -3, -6, 5], [1, 6, -1, -3, -6, 5], [-1, 6, 1, -3, -6, 5], [6, -1, 1, -3, -6, 5], [1, -1, 6, -3, -6, 5], [-1, 1, 6, -3, -6, 5], [-6, -3, 6, 1, -1, 5], [-3, -6, 6, 1, -1, 5], [6, -6, -3, 1, -1, 5], [-6, 6, -3, 1, -1, 5], [-3, 6, -6, 1, -1, 5], [6, -3, -6, 1, -1, 5], [1, -6, -3, 6, -1, 5], [-6, 1, -3, 6, -1, 5], [-3, 1, -6, 6, -1, 5], [1, -3, -6, 6, -1, 5], [-6, -3, 1, 6, -1, 5], [-3, -6, 1, 6, -1, 5], [6, 1, -6, -3, -1, 5], [1, 6, -6, -3, -1, 5], [-6, 6, 1, -3, -1, 5], [6, -6, 1, -3, -1, 5], [1, -6, 6, -3, -1, 5], [-6, 1, 6, -3, -1, 5], [-3, 6, 1, -6, -1, 5], [6, -3, 1, -6, -1, 5], [1, -3, 6, -6, -1, 5], [-3, 1, 6, -6, -1, 5], [6, 1, -3, -6, -1, 5], [1, 6, -3, -6, -1, 5], [-1, -6, -3, 6, 1, 5], [-6, -1, -3, 6, 1, 5], [-3, -1, -6, 6, 1, 5], [-1, -3, -6, 6, 1, 5], [-6, -3, -1, 6, 1, 5], [-3, -6, -1, 6, 1, 5], [6, -1, -6, -3, 1, 5], [-1, 6, -6, -3, 1, 5], [-6, 6, -1, -3, 1, 5], [6, -6, -1, -3, 1, 5], [-1, -6, 6, -3, 1, 5], [-6, -1, 6, -3, 1, 5], [-3, 6, -1, -6, 1, 5], [6, -3, -1, -6, 1, 5], [-1, -3, 6, -6, 1, 5], [-3, -1, 6, -6, 1, 5], [6, -1, -3, -6, 1, 5], [-1, 6, -3, -6, 1, 5], [-6, -3, 6, -1, 1, 5], [-3, -6, 6, -1, 1, 5], [6, -6, -3, -1, 1, 5], [-6, 6, -3, -1, 1, 5], [-3, 6, -6, -1, 1, 5], [6, -3, -6, -1, 1, 5], [1, -1, -6, -3, 6, 5], [-1, 1, -6, -3, 6, 5], [-6, 1, -1, -3, 6, 5], [1, -6, -1, -3, 6, 5], [-1, -6, 1, -3, 6, 5], [-6, -1, 1, -3, 6, 5], [-3, 1, -1, -6, 6, 5], [1, -3, -1, -6, 6, 5], [-1, -3, 1, -6, 6, 5], [-3, -1, 1, -6, 6, 5], [1, -1, -3, -6, 6, 5], [-1, 1, -3, -6, 6, 5], [-6, -3, 1, -1, 6, 5], [-3, -6, 1, -1, 6, 5], [1, -6, -3, -1, 6, 5], [-6, 1, -3, -1, 6, 5], [-3, 1, -6, -1, 6, 5], [1, -3, -6, -1, 6, 5], [-1, -6, -3, 1, 6, 5], [-6, -1, -3, 1, 6, 5], [-3, -1, -6, 1, 6, 5], [-1, -3, -6, 1, 6, 5], [-6, -3, -1, 1, 6, 5], [-3, -6, -1, 1, 6, 5], [5, 6, 1, -1, -6, -3], [6, 5, 1, -1, -6, -3], [1, 5, 6, -1, -6, -3], [5, 1, 6, -1, -6, -3], [6, 1, 5, -1, -6, -3], [1, 6, 5, -1, -6, -3], [-1, 5, 6, 1, -6, -3], [5, -1, 6, 1, -6, -3], [6, -1, 5, 1, -6, -3], [-1, 6, 5, 1, -6, -3], [5, 6, -1, 1, -6, -3], [6, 5, -1, 1, -6, -3], [1, -1, 5, 6, -6, -3], [-1, 1, 5, 6, -6, -3], [5, 1, -1, 6, -6, -3], [1, 5, -1, 6, -6, -3], [-1, 5, 1, 6, -6, -3], [5, -1, 1, 6, -6, -3], [6, 1, -1, 5, -6, -3], [1, 6, -1, 5, -6, -3], [-1, 6, 1, 5, -6, -3], [6, -1, 1, 5, -6, -3], [1, -1, 6, 5, -6, -3], [-1, 1, 6, 5, -6, -3], [-6, 5, 6, 1, -1, -3], [5, -6, 6, 1, -1, -3], [6, -6, 5, 1, -1, -3], [-6, 6, 5, 1, -1, -3], [5, 6, -6, 1, -1, -3], [6, 5, -6, 1, -1, -3], [1, -6, 5, 6, -1, -3], [-6, 1, 5, 6, -1, -3], [5, 1, -6, 6, -1, -3], [1, 5, -6, 6, -1, -3], [-6, 5, 1, 6, -1, -3], [5, -6, 1, 6, -1, -3], [6, 1, -6, 5, -1, -3], [1, 6, -6, 5, -1, -3], [-6, 6, 1, 5, -1, -3], [6, -6, 1, 5, -1, -3], [1, -6, 6, 5, -1, -3], [-6, 1, 6, 5, -1, -3], [5, 6, 1, -6, -1, -3], [6, 5, 1, -6, -1, -3], [1, 5, 6, -6, -1, -3], [5, 1, 6, -6, -1, -3], [6, 1, 5, -6, -1, -3], [1, 6, 5, -6, -1, -3], [-1, -6, 5, 6, 1, -3], [-6, -1, 5, 6, 1, -3], [5, -1, -6, 6, 1, -3], [-1, 5, -6, 6, 1, -3], [-6, 5, -1, 6, 1, -3], [5, -6, -1, 6, 1, -3], [6, -1, -6, 5, 1, -3], [-1, 6, -6, 5, 1, -3], [-6, 6, -1, 5, 1, -3], [6, -6, -1, 5, 1, -3], [-1, -6, 6, 5, 1, -3], [-6, -1, 6, 5, 1, -3], [5, 6, -1, -6, 1, -3], [6, 5, -1, -6, 1, -3], [-1, 5, 6, -6, 1, -3], [5, -1, 6, -6, 1, -3], [6, -1, 5, -6, 1, -3], [-1, 6, 5, -6, 1, -3], [-6, 5, 6, -1, 1, -3], [5, -6, 6, -1, 1, -3], [6, -6, 5, -1, 1, -3], [-6, 6, 5, -1, 1, -3], [5, 6, -6, -1, 1, -3], [6, 5, -6, -1, 1, -3], [1, -1, -6, 5, 6, -3], [-1, 1, -6, 5, 6, -3], [-6, 1, -1, 5, 6, -3], [1, -6, -1, 5, 6, -3], [-1, -6, 1, 5, 6, -3], [-6, -1, 1, 5, 6, -3], [5, 1, -1, -6, 6, -3], [1, 5, -1, -6, 6, -3], [-1, 5, 1, -6, 6, -3], [5, -1, 1, -6, 6, -3], [1, -1, 5, -6, 6, -3], [-1, 1, 5, -6, 6, -3], [-6, 5, 1, -1, 6, -3], [5, -6, 1, -1, 6, -3], [1, -6, 5, -1, 6, -3], [-6, 1, 5, -1, 6, -3], [5, 1, -6, -1, 6, -3], [1, 5, -6, -1, 6, -3], [-1, -6, 5, 1, 6, -3], [-6, -1, 5, 1, 6, -3], [5, -1, -6, 1, 6, -3], [-1, 5, -6, 1, 6, -3], [-6, 5, -1, 1, 6, -3], [5, -6, -1, 1, 6, -3], [6, 1, -1, -6, 5, -3], [1, 6, -1, -6, 5, -3], [-1, 6, 1, -6, 5, -3], [6, -1, 1, -6, 5, -3], [1, -1, 6, -6, 5, -3], [-1, 1, 6, -6, 5, -3], [-6, 6, 1, -1, 5, -3], [6, -6, 1, -1, 5, -3], [1, -6, 6, -1, 5, -3], [-6, 1, 6, -1, 5, -3], [6, 1, -6, -1, 5, -3], [1, 6, -6, -1, 5, -3], [-1, -6, 6, 1, 5, -3], [-6, -1, 6, 1, 5, -3], [6, -1, -6, 1, 5, -3], [-1, 6, -6, 1, 5, -3], [-6, 6, -1, 1, 5, -3], [6, -6, -1, 1, 5, -3], [1, -1, -6, 6, 5, -3], [-1, 1, -6, 6, 5, -3], [-6, 1, -1, 6, 5, -3], [1, -6, -1, 6, 5, -3], [-1, -6, 1, 6, 5, -3], [-6, -1, 1, 6, 5, -3], [-3, 5, 6, 1, -1, -6], [5, -3, 6, 1, -1, -6], [6, -3, 5, 1, -1, -6], [-3, 6, 5, 1, -1, -6], [5, 6, -3, 1, -1, -6], [6, 5, -3, 1, -1, -6], [1, -3, 5, 6, -1, -6], [-3, 1, 5, 6, -1, -6], [5, 1, -3, 6, -1, -6], [1, 5, -3, 6, -1, -6], [-3, 5, 1, 6, -1, -6], [5, -3, 1, 6, -1, -6], [6, 1, -3, 5, -1, -6], [1, 6, -3, 5, -1, -6], [-3, 6, 1, 5, -1, -6], [6, -3, 1, 5, -1, -6], [1, -3, 6, 5, -1, -6], [-3, 1, 6, 5, -1, -6], [5, 6, 1, -3, -1, -6], [6, 5, 1, -3, -1, -6], [1, 5, 6, -3, -1, -6], [5, 1, 6, -3, -1, -6], [6, 1, 5, -3, -1, -6], [1, 6, 5, -3, -1, -6], [-1, -3, 5, 6, 1, -6], [-3, -1, 5, 6, 1, -6], [5, -1, -3, 6, 1, -6], [-1, 5, -3, 6, 1, -6], [-3, 5, -1, 6, 1, -6], [5, -3, -1, 6, 1, -6], [6, -1, -3, 5, 1, -6], [-1, 6, -3, 5, 1, -6], [-3, 6, -1, 5, 1, -6], [6, -3, -1, 5, 1, -6], [-1, -3, 6, 5, 1, -6], [-3, -1, 6, 5, 1, -6], [5, 6, -1, -3, 1, -6], [6, 5, -1, -3, 1, -6], [-1, 5, 6, -3, 1, -6], [5, -1, 6, -3, 1, -6], [6, -1, 5, -3, 1, -6], [-1, 6, 5, -3, 1, -6], [-3, 5, 6, -1, 1, -6], [5, -3, 6, -1, 1, -6], [6, -3, 5, -1, 1, -6], [-3, 6, 5, -1, 1, -6], [5, 6, -3, -1, 1, -6], [6, 5, -3, -1, 1, -6], [1, -1, -3, 5, 6, -6], [-1, 1, -3, 5, 6, -6], [-3, 1, -1, 5, 6, -6], [1, -3, -1, 5, 6, -6], [-1, -3, 1, 5, 6, -6], [-3, -1, 1, 5, 6, -6], [5, 1, -1, -3, 6, -6], [1, 5, -1, -3, 6, -6], [-1, 5, 1, -3, 6, -6], [5, -1, 1, -3, 6, -6], [1, -1, 5, -3, 6, -6], [-1, 1, 5, -3, 6, -6], [-3, 5, 1, -1, 6, -6], [5, -3, 1, -1, 6, -6], [1, -3, 5, -1, 6, -6], [-3, 1, 5, -1, 6, -6], [5, 1, -3, -1, 6, -6], [1, 5, -3, -1, 6, -6], [-1, -3, 5, 1, 6, -6], [-3, -1, 5, 1, 6, -6], [5, -1, -3, 1, 6, -6], [-1, 5, -3, 1, 6, -6], [-3, 5, -1, 1, 6, -6], [5, -3, -1, 1, 6, -6], [6, 1, -1, -3, 5, -6], [1, 6, -1, -3, 5, -6], [-1, 6, 1, -3, 5, -6], [6, -1, 1, -3, 5, -6], [1, -1, 6, -3, 5, -6], [-1, 1, 6, -3, 5, -6], [-3, 6, 1, -1, 5, -6], [6, -3, 1, -1, 5, -6], [1, -3, 6, -1, 5, -6], [-3, 1, 6, -1, 5, -6], [6, 1, -3, -1, 5, -6], [1, 6, -3, -1, 5, -6], [-1, -3, 6, 1, 5, -6], [-3, -1, 6, 1, 5, -6], [6, -1, -3, 1, 5, -6], [-1, 6, -3, 1, 5, -6], [-3, 6, -1, 1, 5, -6], [6, -3, -1, 1, 5, -6], [1, -1, -3, 6, 5, -6], [-1, 1, -3, 6, 5, -6], [-3, 1, -1, 6, 5, -6], [1, -3, -1, 6, 5, -6], [-1, -3, 1, 6, 5, -6], [-3, -1, 1, 6, 5, -6], [5, 6, 1, -1, -3, -6], [6, 5, 1, -1, -3, -6], [1, 5, 6, -1, -3, -6], [5, 1, 6, -1, -3, -6], [6, 1, 5, -1, -3, -6], [1, 6, 5, -1, -3, -6], [-1, 5, 6, 1, -3, -6], [5, -1, 6, 1, -3, -6], [6, -1, 5, 1, -3, -6], [-1, 6, 5, 1, -3, -6], [5, 6, -1, 1, -3, -6], [6, 5, -1, 1, -3, -6], [1, -1, 5, 6, -3, -6], [-1, 1, 5, 6, -3, -6], [5, 1, -1, 6, -3, -6], [1, 5, -1, 6, -3, -6], [-1, 5, 1, 6, -3, -6], [5, -1, 1, 6, -3, -6], [6, 1, -1, 5, -3, -6], [1, 6, -1, 5, -3, -6], [-1, 6, 1, 5, -3, -6], [6, -1, 1, 5, -3, -6], [1, -1, 6, 5, -3, -6], [-1, 1, 6, 5, -3, -6], [-6, -3, 5, 6, 1, -1], [-3, -6, 5, 6, 1, -1], [5, -6, -3, 6, 1, -1], [-6, 5, -3, 6, 1, -1], [-3, 5, -6, 6, 1, -1], [5, -3, -6, 6, 1, -1], [6, -6, -3, 5, 1, -1], [-6, 6, -3, 5, 1, -1], [-3, 6, -6, 5, 1, -1], [6, -3, -6, 5, 1, -1], [-6, -3, 6, 5, 1, -1], [-3, -6, 6, 5, 1, -1], [5, 6, -6, -3, 1, -1], [6, 5, -6, -3, 1, -1], [-6, 5, 6, -3, 1, -1], [5, -6, 6, -3, 1, -1], [6, -6, 5, -3, 1, -1], [-6, 6, 5, -3, 1, -1], [-3, 5, 6, -6, 1, -1], [5, -3, 6, -6, 1, -1], [6, -3, 5, -6, 1, -1], [-3, 6, 5, -6, 1, -1], [5, 6, -3, -6, 1, -1], [6, 5, -3, -6, 1, -1], [1, -6, -3, 5, 6, -1], [-6, 1, -3, 5, 6, -1], [-3, 1, -6, 5, 6, -1], [1, -3, -6, 5, 6, -1], [-6, -3, 1, 5, 6, -1], [-3, -6, 1, 5, 6, -1], [5, 1, -6, -3, 6, -1], [1, 5, -6, -3, 6, -1], [-6, 5, 1, -3, 6, -1], [5, -6, 1, -3, 6, -1], [1, -6, 5, -3, 6, -1], [-6, 1, 5, -3, 6, -1], [-3, 5, 1, -6, 6, -1], [5, -3, 1, -6, 6, -1], [1, -3, 5, -6, 6, -1], [-3, 1, 5, -6, 6, -1], [5, 1, -3, -6, 6, -1], [1, 5, -3, -6, 6, -1], [-6, -3, 5, 1, 6, -1], [-3, -6, 5, 1, 6, -1], [5, -6, -3, 1, 6, -1], [-6, 5, -3, 1, 6, -1], [-3, 5, -6, 1, 6, -1], [5, -3, -6, 1, 6, -1], [6, 1, -6, -3, 5, -1], [1, 6, -6, -3, 5, -1], [-6, 6, 1, -3, 5, -1], [6, -6, 1, -3, 5, -1], [1, -6, 6, -3, 5, -1], [-6, 1, 6, -3, 5, -1], [-3, 6, 1, -6, 5, -1], [6, -3, 1, -6, 5, -1], [1, -3, 6, -6, 5, -1], [-3, 1, 6, -6, 5, -1], [6, 1, -3, -6, 5, -1], [1, 6, -3, -6, 5, -1], [-6, -3, 6, 1, 5, -1], [-3, -6, 6, 1, 5, -1], [6, -6, -3, 1, 5, -1], [-6, 6, -3, 1, 5, -1], [-3, 6, -6, 1, 5, -1], [6, -3, -6, 1, 5, -1], [1, -6, -3, 6, 5, -1], [-6, 1, -3, 6, 5, -1], [-3, 1, -6, 6, 5, -1], [1, -3, -6, 6, 5, -1], [-6, -3, 1, 6, 5, -1], [-3, -6, 1, 6, 5, -1], [5, 6, 1, -6, -3, -1], [6, 5, 1, -6, -3, -1], [1, 5, 6, -6, -3, -1], [5, 1, 6, -6, -3, -1], [6, 1, 5, -6, -3, -1], [1, 6, 5, -6, -3, -1], [-6, 5, 6, 1, -3, -1], [5, -6, 6, 1, -3, -1], [6, -6, 5, 1, -3, -1], [-6, 6, 5, 1, -3, -1], [5, 6, -6, 1, -3, -1], [6, 5, -6, 1, -3, -1], [1, -6, 5, 6, -3, -1], [-6, 1, 5, 6, -3, -1], [5, 1, -6, 6, -3, -1], [1, 5, -6, 6, -3, -1], [-6, 5, 1, 6, -3, -1], [5, -6, 1, 6, -3, -1], [6, 1, -6, 5, -3, -1], [1, 6, -6, 5, -3, -1], [-6, 6, 1, 5, -3, -1], [6, -6, 1, 5, -3, -1], [1, -6, 6, 5, -3, -1], [-6, 1, 6, 5, -3, -1], [-3, 5, 6, 1, -6, -1], [5, -3, 6, 1, -6, -1], [6, -3, 5, 1, -6, -1], [-3, 6, 5, 1, -6, -1], [5, 6, -3, 1, -6, -1], [6, 5, -3, 1, -6, -1], [1, -3, 5, 6, -6, -1], [-3, 1, 5, 6, -6, -1], [5, 1, -3, 6, -6, -1], [1, 5, -3, 6, -6, -1], [-3, 5, 1, 6, -6, -1], [5, -3, 1, 6, -6, -1], [6, 1, -3, 5, -6, -1], [1, 6, -3, 5, -6, -1], [-3, 6, 1, 5, -6, -1], [6, -3, 1, 5, -6, -1], [1, -3, 6, 5, -6, -1], [-3, 1, 6, 5, -6, -1], [5, 6, 1, -3, -6, -1], [6, 5, 1, -3, -6, -1], [1, 5, 6, -3, -6, -1], [5, 1, 6, -3, -6, -1], [6, 1, 5, -3, -6, -1], [1, 6, 5, -3, -6, -1], [-1, -6, -3, 5, 6, 1], [-6, -1, -3, 5, 6, 1], [-3, -1, -6, 5, 6, 1], [-1, -3, -6, 5, 6, 1], [-6, -3, -1, 5, 6, 1], [-3, -6, -1, 5, 6, 1], [5, -1, -6, -3, 6, 1], [-1, 5, -6, -3, 6, 1], [-6, 5, -1, -3, 6, 1], [5, -6, -1, -3, 6, 1], [-1, -6, 5, -3, 6, 1], [-6, -1, 5, -3, 6, 1], [-3, 5, -1, -6, 6, 1], [5, -3, -1, -6, 6, 1], [-1, -3, 5, -6, 6, 1], [-3, -1, 5, -6, 6, 1], [5, -1, -3, -6, 6, 1], [-1, 5, -3, -6, 6, 1], [-6, -3, 5, -1, 6, 1], [-3, -6, 5, -1, 6, 1], [5, -6, -3, -1, 6, 1], [-6, 5, -3, -1, 6, 1], [-3, 5, -6, -1, 6, 1], [5, -3, -6, -1, 6, 1], [6, -1, -6, -3, 5, 1], [-1, 6, -6, -3, 5, 1], [-6, 6, -1, -3, 5, 1], [6, -6, -1, -3, 5, 1], [-1, -6, 6, -3, 5, 1], [-6, -1, 6, -3, 5, 1], [-3, 6, -1, -6, 5, 1], [6, -3, -1, -6, 5, 1], [-1, -3, 6, -6, 5, 1], [-3, -1, 6, -6, 5, 1], [6, -1, -3, -6, 5, 1], [-1, 6, -3, -6, 5, 1], [-6, -3, 6, -1, 5, 1], [-3, -6, 6, -1, 5, 1], [6, -6, -3, -1, 5, 1], [-6, 6, -3, -1, 5, 1], [-3, 6, -6, -1, 5, 1], [6, -3, -6, -1, 5, 1], [-1, -6, -3, 6, 5, 1], [-6, -1, -3, 6, 5, 1], [-3, -1, -6, 6, 5, 1], [-1, -3, -6, 6, 5, 1], [-6, -3, -1, 6, 5, 1], [-3, -6, -1, 6, 5, 1], [5, 6, -1, -6, -3, 1], [6, 5, -1, -6, -3, 1], [-1, 5, 6, -6, -3, 1], [5, -1, 6, -6, -3, 1], [6, -1, 5, -6, -3, 1], [-1, 6, 5, -6, -3, 1], [-6, 5, 6, -1, -3, 1], [5, -6, 6, -1, -3, 1], [6, -6, 5, -1, -3, 1], [-6, 6, 5, -1, -3, 1], [5, 6, -6, -1, -3, 1], [6, 5, -6, -1, -3, 1], [-1, -6, 5, 6, -3, 1], [-6, -1, 5, 6, -3, 1], [5, -1, -6, 6, -3, 1], [-1, 5, -6, 6, -3, 1], [-6, 5, -1, 6, -3, 1], [5, -6, -1, 6, -3, 1], [6, -1, -6, 5, -3, 1], [-1, 6, -6, 5, -3, 1], [-6, 6, -1, 5, -3, 1], [6, -6, -1, 5, -3, 1], [-1, -6, 6, 5, -3, 1], [-6, -1, 6, 5, -3, 1], [-3, 5, 6, -1, -6, 1], [5, -3, 6, -1, -6, 1], [6, -3, 5, -1, -6, 1], [-3, 6, 5, -1, -6, 1], [5, 6, -3, -1, -6, 1], [6, 5, -3, -1, -6, 1], [-1, -3, 5, 6, -6, 1], [-3, -1, 5, 6, -6, 1], [5, -1, -3, 6, -6, 1], [-1, 5, -3, 6, -6, 1], [-3, 5, -1, 6, -6, 1], [5, -3, -1, 6, -6, 1], [6, -1, -3, 5, -6, 1], [-1, 6, -3, 5, -6, 1], [-3, 6, -1, 5, -6, 1], [6, -3, -1, 5, -6, 1], [-1, -3, 6, 5, -6, 1], [-3, -1, 6, 5, -6, 1], [5, 6, -1, -3, -6, 1], [6, 5, -1, -3, -6, 1], [-1, 5, 6, -3, -6, 1], [5, -1, 6, -3, -6, 1], [6, -1, 5, -3, -6, 1], [-1, 6, 5, -3, -6, 1], [-6, -3, 5, 6, -1, 1], [-3, -6, 5, 6, -1, 1], [5, -6, -3, 6, -1, 1], [-6, 5, -3, 6, -1, 1], [-3, 5, -6, 6, -1, 1], [5, -3, -6, 6, -1, 1], [6, -6, -3, 5, -1, 1], [-6, 6, -3, 5, -1, 1], [-3, 6, -6, 5, -1, 1], [6, -3, -6, 5, -1, 1], [-6, -3, 6, 5, -1, 1], [-3, -6, 6, 5, -1, 1], [5, 6, -6, -3, -1, 1], [6, 5, -6, -3, -1, 1], [-6, 5, 6, -3, -1, 1], [5, -6, 6, -3, -1, 1], [6, -6, 5, -3, -1, 1], [-6, 6, 5, -3, -1, 1], [-3, 5, 6, -6, -1, 1], [5, -3, 6, -6, -1, 1], [6, -3, 5, -6, -1, 1], [-3, 6, 5, -6, -1, 1], [5, 6, -3, -6, -1, 1], [6, 5, -3, -6, -1, 1], [1, -1, -6, -3, 5, 6], [-1, 1, -6, -3, 5, 6], [-6, 1, -1, -3, 5, 6], [1, -6, -1, -3, 5, 6], [-1, -6, 1, -3, 5, 6], [-6, -1, 1, -3, 5, 6], [-3, 1, -1, -6, 5, 6], [1, -3, -1, -6, 5, 6], [-1, -3, 1, -6, 5, 6], [-3, -1, 1, -6, 5, 6], [1, -1, -3, -6, 5, 6], [-1, 1, -3, -6, 5, 6], [-6, -3, 1, -1, 5, 6], [-3, -6, 1, -1, 5, 6], [1, -6, -3, -1, 5, 6], [-6, 1, -3, -1, 5, 6], [-3, 1, -6, -1, 5, 6], [1, -3, -6, -1, 5, 6], [-1, -6, -3, 1, 5, 6], [-6, -1, -3, 1, 5, 6], [-3, -1, -6, 1, 5, 6], [-1, -3, -6, 1, 5, 6], [-6, -3, -1, 1, 5, 6], [-3, -6, -1, 1, 5, 6], [5, 1, -1, -6, -3, 6], [1, 5, -1, -6, -3, 6], [-1, 5, 1, -6, -3, 6], [5, -1, 1, -6, -3, 6], [1, -1, 5, -6, -3, 6], [-1, 1, 5, -6, -3, 6], [-6, 5, 1, -1, -3, 6], [5, -6, 1, -1, -3, 6], [1, -6, 5, -1, -3, 6], [-6, 1, 5, -1, -3, 6], [5, 1, -6, -1, -3, 6], [1, 5, -6, -1, -3, 6], [-1, -6, 5, 1, -3, 6], [-6, -1, 5, 1, -3, 6], [5, -1, -6, 1, -3, 6], [-1, 5, -6, 1, -3, 6], [-6, 5, -1, 1, -3, 6], [5, -6, -1, 1, -3, 6], [1, -1, -6, 5, -3, 6], [-1, 1, -6, 5, -3, 6], [-6, 1, -1, 5, -3, 6], [1, -6, -1, 5, -3, 6], [-1, -6, 1, 5, -3, 6], [-6, -1, 1, 5, -3, 6], [-3, 5, 1, -1, -6, 6], [5, -3, 1, -1, -6, 6], [1, -3, 5, -1, -6, 6], [-3, 1, 5, -1, -6, 6], [5, 1, -3, -1, -6, 6], [1, 5, -3, -1, -6, 6], [-1, -3, 5, 1, -6, 6], [-3, -1, 5, 1, -6, 6], [5, -1, -3, 1, -6, 6], [-1, 5, -3, 1, -6, 6], [-3, 5, -1, 1, -6, 6], [5, -3, -1, 1, -6, 6], [1, -1, -3, 5, -6, 6], [-1, 1, -3, 5, -6, 6], [-3, 1, -1, 5, -6, 6], [1, -3, -1, 5, -6, 6], [-1, -3, 1, 5, -6, 6], [-3, -1, 1, 5, -6, 6], [5, 1, -1, -3, -6, 6], [1, 5, -1, -3, -6, 6], [-1, 5, 1, -3, -6, 6], [5, -1, 1, -3, -6, 6], [1, -1, 5, -3, -6, 6], [-1, 1, 5, -3, -6, 6], [-6, -3, 5, 1, -1, 6], [-3, -6, 5, 1, -1, 6], [5, -6, -3, 1, -1, 6], [-6, 5, -3, 1, -1, 6], [-3, 5, -6, 1, -1, 6], [5, -3, -6, 1, -1, 6], [1, -6, -3, 5, -1, 6], [-6, 1, -3, 5, -1, 6], [-3, 1, -6, 5, -1, 6], [1, -3, -6, 5, -1, 6], [-6, -3, 1, 5, -1, 6], [-3, -6, 1, 5, -1, 6], [5, 1, -6, -3, -1, 6], [1, 5, -6, -3, -1, 6], [-6, 5, 1, -3, -1, 6], [5, -6, 1, -3, -1, 6], [1, -6, 5, -3, -1, 6], [-6, 1, 5, -3, -1, 6], [-3, 5, 1, -6, -1, 6], [5, -3, 1, -6, -1, 6], [1, -3, 5, -6, -1, 6], [-3, 1, 5, -6, -1, 6], [5, 1, -3, -6, -1, 6], [1, 5, -3, -6, -1, 6], [-1, -6, -3, 5, 1, 6], [-6, -1, -3, 5, 1, 6], [-3, -1, -6, 5, 1, 6], [-1, -3, -6, 5, 1, 6], [-6, -3, -1, 5, 1, 6], [-3, -6, -1, 5, 1, 6], [5, -1, -6, -3, 1, 6], [-1, 5, -6, -3, 1, 6], [-6, 5, -1, -3, 1, 6], [5, -6, -1, -3, 1, 6], [-1, -6, 5, -3, 1, 6], [-6, -1, 5, -3, 1, 6], [-3, 5, -1, -6, 1, 6], [5, -3, -1, -6, 1, 6], [-1, -3, 5, -6, 1, 6], [-3, -1, 5, -6, 1, 6], [5, -1, -3, -6, 1, 6], [-1, 5, -3, -6, 1, 6], [-6, -3, 5, -1, 1, 6], [-3, -6, 5, -1, 1, 6], [5, -6, -3, -1, 1, 6], [-6, 5, -3, -1, 1, 6], [-3, 5, -6, -1, 1, 6], [5, -3, -6, -1, 1, 6]]
Input: {""nums"": [-1, 2, -6, 5, -5, 9]}
Output: [[9, -5, 5, -6, 2, -1], [-5, 9, 5, -6, 2, -1], [5, 9, -5, -6, 2, -1], [9, 5, -5, -6, 2, -1], [-5, 5, 9, -6, 2, -1], [5, -5, 9, -6, 2, -1], [-6, 9, -5, 5, 2, -1], [9, -6, -5, 5, 2, -1], [-5, -6, 9, 5, 2, -1], [-6, -5, 9, 5, 2, -1], [9, -5, -6, 5, 2, -1], [-5, 9, -6, 5, 2, -1], [5, -6, 9, -5, 2, -1], [-6, 5, 9, -5, 2, -1], [9, 5, -6, -5, 2, -1], [5, 9, -6, -5, 2, -1], [-6, 9, 5, -5, 2, -1], [9, -6, 5, -5, 2, -1], [-5, 5, -6, 9, 2, -1], [5, -5, -6, 9, 2, -1], [-6, -5, 5, 9, 2, -1], [-5, -6, 5, 9, 2, -1], [5, -6, -5, 9, 2, -1], [-6, 5, -5, 9, 2, -1], [2, 9, -5, 5, -6, -1], [9, 2, -5, 5, -6, -1], [-5, 2, 9, 5, -6, -1], [2, -5, 9, 5, -6, -1], [9, -5, 2, 5, -6, -1], [-5, 9, 2, 5, -6, -1], [5, 2, 9, -5, -6, -1], [2, 5, 9, -5, -6, -1], [9, 5, 2, -5, -6, -1], [5, 9, 2, -5, -6, -1], [2, 9, 5, -5, -6, -1], [9, 2, 5, -5, -6, -1], [-5, 5, 2, 9, -6, -1], [5, -5, 2, 9, -6, -1], [2, -5, 5, 9, -6, -1], [-5, 2, 5, 9, -6, -1], [5, 2, -5, 9, -6, -1], [2, 5, -5, 9, -6, -1], [9, -5, 5, 2, -6, -1], [-5, 9, 5, 2, -6, -1], [5, 9, -5, 2, -6, -1], [9, 5, -5, 2, -6, -1], [-5, 5, 9, 2, -6, -1], [5, -5, 9, 2, -6, -1], [-6, 2, 9, -5, 5, -1], [2, -6, 9, -5, 5, -1], [9, -6, 2, -5, 5, -1], [-6, 9, 2, -5, 5, -1], [2, 9, -6, -5, 5, -1], [9, 2, -6, -5, 5, -1], [-5, -6, 2, 9, 5, -1], [-6, -5, 2, 9, 5, -1], [2, -5, -6, 9, 5, -1], [-5, 2, -6, 9, 5, -1], [-6, 2, -5, 9, 5, -1], [2, -6, -5, 9, 5, -1], [9, -5, -6, 2, 5, -1], [-5, 9, -6, 2, 5, -1], [-6, 9, -5, 2, 5, -1], [9, -6, -5, 2, 5, -1], [-5, -6, 9, 2, 5, -1], [-6, -5, 9, 2, 5, -1], [2, 9, -5, -6, 5, -1], [9, 2, -5, -6, 5, -1], [-5, 2, 9, -6, 5, -1], [2, -5, 9, -6, 5, -1], [9, -5, 2, -6, 5, -1], [-5, 9, 2, -6, 5, -1], [5, -6, 2, 9, -5, -1], [-6, 5, 2, 9, -5, -1], [2, 5, -6, 9, -5, -1], [5, 2, -6, 9, -5, -1], [-6, 2, 5, 9, -5, -1], [2, -6, 5, 9, -5, -1], [9, 5, -6, 2, -5, -1], [5, 9, -6, 2, -5, -1], [-6, 9, 5, 2, -5, -1], [9, -6, 5, 2, -5, -1], [5, -6, 9, 2, -5, -1], [-6, 5, 9, 2, -5, -1], [2, 9, 5, -6, -5, -1], [9, 2, 5, -6, -5, -1], [5, 2, 9, -6, -5, -1], [2, 5, 9, -6, -5, -1], [9, 5, 2, -6, -5, -1], [5, 9, 2, -6, -5, -1], [-6, 2, 9, 5, -5, -1], [2, -6, 9, 5, -5, -1], [9, -6, 2, 5, -5, -1], [-6, 9, 2, 5, -5, -1], [2, 9, -6, 5, -5, -1], [9, 2, -6, 5, -5, -1], [-5, 5, -6, 2, 9, -1], [5, -5, -6, 2, 9, -1], [-6, -5, 5, 2, 9, -1], [-5, -6, 5, 2, 9, -1], [5, -6, -5, 2, 9, -1], [-6, 5, -5, 2, 9, -1], [2, -5, 5, -6, 9, -1], [-5, 2, 5, -6, 9, -1], [5, 2, -5, -6, 9, -1], [2, 5, -5, -6, 9, -1], [-5, 5, 2, -6, 9, -1], [5, -5, 2, -6, 9, -1], [-6, 2, -5, 5, 9, -1], [2, -6, -5, 5, 9, -1], [-5, -6, 2, 5, 9, -1], [-6, -5, 2, 5, 9, -1], [2, -5, -6, 5, 9, -1], [-5, 2, -6, 5, 9, -1], [5, -6, 2, -5, 9, -1], [-6, 5, 2, -5, 9, -1], [2, 5, -6, -5, 9, -1], [5, 2, -6, -5, 9, -1], [-6, 2, 5, -5, 9, -1], [2, -6, 5, -5, 9, -1], [-1, 9, -5, 5, -6, 2], [9, -1, -5, 5, -6, 2], [-5, -1, 9, 5, -6, 2], [-1, -5, 9, 5, -6, 2], [9, -5, -1, 5, -6, 2], [-5, 9, -1, 5, -6, 2], [5, -1, 9, -5, -6, 2], [-1, 5, 9, -5, -6, 2], [9, 5, -1, -5, -6, 2], [5, 9, -1, -5, -6, 2], [-1, 9, 5, -5, -6, 2], [9, -1, 5, -5, -6, 2], [-5, 5, -1, 9, -6, 2], [5, -5, -1, 9, -6, 2], [-1, -5, 5, 9, -6, 2], [-5, -1, 5, 9, -6, 2], [5, -1, -5, 9, -6, 2], [-1, 5, -5, 9, -6, 2], [9, -5, 5, -1, -6, 2], [-5, 9, 5, -1, -6, 2], [5, 9, -5, -1, -6, 2], [9, 5, -5, -1, -6, 2], [-5, 5, 9, -1, -6, 2], [5, -5, 9, -1, -6, 2], [-6, -1, 9, -5, 5, 2], [-1, -6, 9, -5, 5, 2], [9, -6, -1, -5, 5, 2], [-6, 9, -1, -5, 5, 2], [-1, 9, -6, -5, 5, 2], [9, -1, -6, -5, 5, 2], [-5, -6, -1, 9, 5, 2], [-6, -5, -1, 9, 5, 2], [-1, -5, -6, 9, 5, 2], [-5, -1, -6, 9, 5, 2], [-6, -1, -5, 9, 5, 2], [-1, -6, -5, 9, 5, 2], [9, -5, -6, -1, 5, 2], [-5, 9, -6, -1, 5, 2], [-6, 9, -5, -1, 5, 2], [9, -6, -5, -1, 5, 2], [-5, -6, 9, -1, 5, 2], [-6, -5, 9, -1, 5, 2], [-1, 9, -5, -6, 5, 2], [9, -1, -5, -6, 5, 2], [-5, -1, 9, -6, 5, 2], [-1, -5, 9, -6, 5, 2], [9, -5, -1, -6, 5, 2], [-5, 9, -1, -6, 5, 2], [5, -6, -1, 9, -5, 2], [-6, 5, -1, 9, -5, 2], [-1, 5, -6, 9, -5, 2], [5, -1, -6, 9, -5, 2], [-6, -1, 5, 9, -5, 2], [-1, -6, 5, 9, -5, 2], [9, 5, -6, -1, -5, 2], [5, 9, -6, -1, -5, 2], [-6, 9, 5, -1, -5, 2], [9, -6, 5, -1, -5, 2], [5, -6, 9, -1, -5, 2], [-6, 5, 9, -1, -5, 2], [-1, 9, 5, -6, -5, 2], [9, -1, 5, -6, -5, 2], [5, -1, 9, -6, -5, 2], [-1, 5, 9, -6, -5, 2], [9, 5, -1, -6, -5, 2], [5, 9, -1, -6, -5, 2], [-6, -1, 9, 5, -5, 2], [-1, -6, 9, 5, -5, 2], [9, -6, -1, 5, -5, 2], [-6, 9, -1, 5, -5, 2], [-1, 9, -6, 5, -5, 2], [9, -1, -6, 5, -5, 2], [-5, 5, -6, -1, 9, 2], [5, -5, -6, -1, 9, 2], [-6, -5, 5, -1, 9, 2], [-5, -6, 5, -1, 9, 2], [5, -6, -5, -1, 9, 2], [-6, 5, -5, -1, 9, 2], [-1, -5, 5, -6, 9, 2], [-5, -1, 5, -6, 9, 2], [5, -1, -5, -6, 9, 2], [-1, 5, -5, -6, 9, 2], [-5, 5, -1, -6, 9, 2], [5, -5, -1, -6, 9, 2], [-6, -1, -5, 5, 9, 2], [-1, -6, -5, 5, 9, 2], [-5, -6, -1, 5, 9, 2], [-6, -5, -1, 5, 9, 2], [-1, -5, -6, 5, 9, 2], [-5, -1, -6, 5, 9, 2], [5, -6, -1, -5, 9, 2], [-6, 5, -1, -5, 9, 2], [-1, 5, -6, -5, 9, 2], [5, -1, -6, -5, 9, 2], [-6, -1, 5, -5, 9, 2], [-1, -6, 5, -5, 9, 2], [9, -5, 5, -6, -1, 2], [-5, 9, 5, -6, -1, 2], [5, 9, -5, -6, -1, 2], [9, 5, -5, -6, -1, 2], [-5, 5, 9, -6, -1, 2], [5, -5, 9, -6, -1, 2], [-6, 9, -5, 5, -1, 2], [9, -6, -5, 5, -1, 2], [-5, -6, 9, 5, -1, 2], [-6, -5, 9, 5, -1, 2], [9, -5, -6, 5, -1, 2], [-5, 9, -6, 5, -1, 2], [5, -6, 9, -5, -1, 2], [-6, 5, 9, -5, -1, 2], [9, 5, -6, -5, -1, 2], [5, 9, -6, -5, -1, 2], [-6, 9, 5, -5, -1, 2], [9, -6, 5, -5, -1, 2], [-5, 5, -6, 9, -1, 2], [5, -5, -6, 9, -1, 2], [-6, -5, 5, 9, -1, 2], [-5, -6, 5, 9, -1, 2], [5, -6, -5, 9, -1, 2], [-6, 5, -5, 9, -1, 2], [2, -1, 9, -5, 5, -6], [-1, 2, 9, -5, 5, -6], [9, 2, -1, -5, 5, -6], [2, 9, -1, -5, 5, -6], [-1, 9, 2, -5, 5, -6], [9, -1, 2, -5, 5, -6], [-5, 2, -1, 9, 5, -6], [2, -5, -1, 9, 5, -6], [-1, -5, 2, 9, 5, -6], [-5, -1, 2, 9, 5, -6], [2, -1, -5, 9, 5, -6], [-1, 2, -5, 9, 5, -6], [9, -5, 2, -1, 5, -6], [-5, 9, 2, -1, 5, -6], [2, 9, -5, -1, 5, -6], [9, 2, -5, -1, 5, -6], [-5, 2, 9, -1, 5, -6], [2, -5, 9, -1, 5, -6], [-1, 9, -5, 2, 5, -6], [9, -1, -5, 2, 5, -6], [-5, -1, 9, 2, 5, -6], [-1, -5, 9, 2, 5, -6], [9, -5, -1, 2, 5, -6], [-5, 9, -1, 2, 5, -6], [5, 2, -1, 9, -5, -6], [2, 5, -1, 9, -5, -6], [-1, 5, 2, 9, -5, -6], [5, -1, 2, 9, -5, -6], [2, -1, 5, 9, -5, -6], [-1, 2, 5, 9, -5, -6], [9, 5, 2, -1, -5, -6], [5, 9, 2, -1, -5, -6], [2, 9, 5, -1, -5, -6], [9, 2, 5, -1, -5, -6], [5, 2, 9, -1, -5, -6], [2, 5, 9, -1, -5, -6], [-1, 9, 5, 2, -5, -6], [9, -1, 5, 2, -5, -6], [5, -1, 9, 2, -5, -6], [-1, 5, 9, 2, -5, -6], [9, 5, -1, 2, -5, -6], [5, 9, -1, 2, -5, -6], [2, -1, 9, 5, -5, -6], [-1, 2, 9, 5, -5, -6], [9, 2, -1, 5, -5, -6], [2, 9, -1, 5, -5, -6], [-1, 9, 2, 5, -5, -6], [9, -1, 2, 5, -5, -6], [-5, 5, 2, -1, 9, -6], [5, -5, 2, -1, 9, -6], [2, -5, 5, -1, 9, -6], [-5, 2, 5, -1, 9, -6], [5, 2, -5, -1, 9, -6], [2, 5, -5, -1, 9, -6], [-1, -5, 5, 2, 9, -6], [-5, -1, 5, 2, 9, -6], [5, -1, -5, 2, 9, -6], [-1, 5, -5, 2, 9, -6], [-5, 5, -1, 2, 9, -6], [5, -5, -1, 2, 9, -6], [2, -1, -5, 5, 9, -6], [-1, 2, -5, 5, 9, -6], [-5, 2, -1, 5, 9, -6], [2, -5, -1, 5, 9, -6], [-1, -5, 2, 5, 9, -6], [-5, -1, 2, 5, 9, -6], [5, 2, -1, -5, 9, -6], [2, 5, -1, -5, 9, -6], [-1, 5, 2, -5, 9, -6], [5, -1, 2, -5, 9, -6], [2, -1, 5, -5, 9, -6], [-1, 2, 5, -5, 9, -6], [9, -5, 5, 2, -1, -6], [-5, 9, 5, 2, -1, -6], [5, 9, -5, 2, -1, -6], [9, 5, -5, 2, -1, -6], [-5, 5, 9, 2, -1, -6], [5, -5, 9, 2, -1, -6], [2, 9, -5, 5, -1, -6], [9, 2, -5, 5, -1, -6], [-5, 2, 9, 5, -1, -6], [2, -5, 9, 5, -1, -6], [9, -5, 2, 5, -1, -6], [-5, 9, 2, 5, -1, -6], [5, 2, 9, -5, -1, -6], [2, 5, 9, -5, -1, -6], [9, 5, 2, -5, -1, -6], [5, 9, 2, -5, -1, -6], [2, 9, 5, -5, -1, -6], [9, 2, 5, -5, -1, -6], [-5, 5, 2, 9, -1, -6], [5, -5, 2, 9, -1, -6], [2, -5, 5, 9, -1, -6], [-5, 2, 5, 9, -1, -6], [5, 2, -5, 9, -1, -6], [2, 5, -5, 9, -1, -6], [-1, 9, -5, 5, 2, -6], [9, -1, -5, 5, 2, -6], [-5, -1, 9, 5, 2, -6], [-1, -5, 9, 5, 2, -6], [9, -5, -1, 5, 2, -6], [-5, 9, -1, 5, 2, -6], [5, -1, 9, -5, 2, -6], [-1, 5, 9, -5, 2, -6], [9, 5, -1, -5, 2, -6], [5, 9, -1, -5, 2, -6], [-1, 9, 5, -5, 2, -6], [9, -1, 5, -5, 2, -6], [-5, 5, -1, 9, 2, -6], [5, -5, -1, 9, 2, -6], [-1, -5, 5, 9, 2, -6], [-5, -1, 5, 9, 2, -6], [5, -1, -5, 9, 2, -6], [-1, 5, -5, 9, 2, -6], [9, -5, 5, -1, 2, -6], [-5, 9, 5, -1, 2, -6], [5, 9, -5, -1, 2, -6], [9, 5, -5, -1, 2, -6], [-5, 5, 9, -1, 2, -6], [5, -5, 9, -1, 2, -6], [-6, 2, -1, 9, -5, 5], [2, -6, -1, 9, -5, 5], [-1, -6, 2, 9, -5, 5], [-6, -1, 2, 9, -5, 5], [2, -1, -6, 9, -5, 5], [-1, 2, -6, 9, -5, 5], [9, -6, 2, -1, -5, 5], [-6, 9, 2, -1, -5, 5], [2, 9, -6, -1, -5, 5], [9, 2, -6, -1, -5, 5], [-6, 2, 9, -1, -5, 5], [2, -6, 9, -1, -5, 5], [-1, 9, -6, 2, -5, 5], [9, -1, -6, 2, -5, 5], [-6, -1, 9, 2, -5, 5], [-1, -6, 9, 2, -5, 5], [9, -6, -1, 2, -5, 5], [-6, 9, -1, 2, -5, 5], [2, -1, 9, -6, -5, 5], [-1, 2, 9, -6, -5, 5], [9, 2, -1, -6, -5, 5], [2, 9, -1, -6, -5, 5], [-1, 9, 2, -6, -5, 5], [9, -1, 2, -6, -5, 5], [-5, -6, 2, -1, 9, 5], [-6, -5, 2, -1, 9, 5], [2, -5, -6, -1, 9, 5], [-5, 2, -6, -1, 9, 5], [-6, 2, -5, -1, 9, 5], [2, -6, -5, -1, 9, 5], [-1, -5, -6, 2, 9, 5], [-5, -1, -6, 2, 9, 5], [-6, -1, -5, 2, 9, 5], [-1, -6, -5, 2, 9, 5], [-5, -6, -1, 2, 9, 5], [-6, -5, -1, 2, 9, 5], [2, -1, -5, -6, 9, 5], [-1, 2, -5, -6, 9, 5], [-5, 2, -1, -6, 9, 5], [2, -5, -1, -6, 9, 5], [-1, -5, 2, -6, 9, 5], [-5, -1, 2, -6, 9, 5], [-6, 2, -1, -5, 9, 5], [2, -6, -1, -5, 9, 5], [-1, -6, 2, -5, 9, 5], [-6, -1, 2, -5, 9, 5], [2, -1, -6, -5, 9, 5], [-1, 2, -6, -5, 9, 5], [9, -5, -6, 2, -1, 5], [-5, 9, -6, 2, -1, 5], [-6, 9, -5, 2, -1, 5], [9, -6, -5, 2, -1, 5], [-5, -6, 9, 2, -1, 5], [-6, -5, 9, 2, -1, 5], [2, 9, -5, -6, -1, 5], [9, 2, -5, -6, -1, 5], [-5, 2, 9, -6, -1, 5], [2, -5, 9, -6, -1, 5], [9, -5, 2, -6, -1, 5], [-5, 9, 2, -6, -1, 5], [-6, 2, 9, -5, -1, 5], [2, -6, 9, -5, -1, 5], [9, -6, 2, -5, -1, 5], [-6, 9, 2, -5, -1, 5], [2, 9, -6, -5, -1, 5], [9, 2, -6, -5, -1, 5], [-5, -6, 2, 9, -1, 5], [-6, -5, 2, 9, -1, 5], [2, -5, -6, 9, -1, 5], [-5, 2, -6, 9, -1, 5], [-6, 2, -5, 9, -1, 5], [2, -6, -5, 9, -1, 5], [-1, 9, -5, -6, 2, 5], [9, -1, -5, -6, 2, 5], [-5, -1, 9, -6, 2, 5], [-1, -5, 9, -6, 2, 5], [9, -5, -1, -6, 2, 5], [-5, 9, -1, -6, 2, 5], [-6, -1, 9, -5, 2, 5], [-1, -6, 9, -5, 2, 5], [9, -6, -1, -5, 2, 5], [-6, 9, -1, -5, 2, 5], [-1, 9, -6, -5, 2, 5], [9, -1, -6, -5, 2, 5], [-5, -6, -1, 9, 2, 5], [-6, -5, -1, 9, 2, 5], [-1, -5, -6, 9, 2, 5], [-5, -1, -6, 9, 2, 5], [-6, -1, -5, 9, 2, 5], [-1, -6, -5, 9, 2, 5], [9, -5, -6, -1, 2, 5], [-5, 9, -6, -1, 2, 5], [-6, 9, -5, -1, 2, 5], [9, -6, -5, -1, 2, 5], [-5, -6, 9, -1, 2, 5], [-6, -5, 9, -1, 2, 5], [2, -1, 9, -5, -6, 5], [-1, 2, 9, -5, -6, 5], [9, 2, -1, -5, -6, 5], [2, 9, -1, -5, -6, 5], [-1, 9, 2, -5, -6, 5], [9, -1, 2, -5, -6, 5], [-5, 2, -1, 9, -6, 5], [2, -5, -1, 9, -6, 5], [-1, -5, 2, 9, -6, 5], [-5, -1, 2, 9, -6, 5], [2, -1, -5, 9, -6, 5], [-1, 2, -5, 9, -6, 5], [9, -5, 2, -1, -6, 5], [-5, 9, 2, -1, -6, 5], [2, 9, -5, -1, -6, 5], [9, 2, -5, -1, -6, 5], [-5, 2, 9, -1, -6, 5], [2, -5, 9, -1, -6, 5], [-1, 9, -5, 2, -6, 5], [9, -1, -5, 2, -6, 5], [-5, -1, 9, 2, -6, 5], [-1, -5, 9, 2, -6, 5], [9, -5, -1, 2, -6, 5], [-5, 9, -1, 2, -6, 5], [5, -6, 2, -1, 9, -5], [-6, 5, 2, -1, 9, -5], [2, 5, -6, -1, 9, -5], [5, 2, -6, -1, 9, -5], [-6, 2, 5, -1, 9, -5], [2, -6, 5, -1, 9, -5], [-1, 5, -6, 2, 9, -5], [5, -1, -6, 2, 9, -5], [-6, -1, 5, 2, 9, -5], [-1, -6, 5, 2, 9, -5], [5, -6, -1, 2, 9, -5], [-6, 5, -1, 2, 9, -5], [2, -1, 5, -6, 9, -5], [-1, 2, 5, -6, 9, -5], [5, 2, -1, -6, 9, -5], [2, 5, -1, -6, 9, -5], [-1, 5, 2, -6, 9, -5], [5, -1, 2, -6, 9, -5], [-6, 2, -1, 5, 9, -5], [2, -6, -1, 5, 9, -5], [-1, -6, 2, 5, 9, -5], [-6, -1, 2, 5, 9, -5], [2, -1, -6, 5, 9, -5], [-1, 2, -6, 5, 9, -5], [9, 5, -6, 2, -1, -5], [5, 9, -6, 2, -1, -5], [-6, 9, 5, 2, -1, -5], [9, -6, 5, 2, -1, -5], [5, -6, 9, 2, -1, -5], [-6, 5, 9, 2, -1, -5], [2, 9, 5, -6, -1, -5], [9, 2, 5, -6, -1, -5], [5, 2, 9, -6, -1, -5], [2, 5, 9, -6, -1, -5], [9, 5, 2, -6, -1, -5], [5, 9, 2, -6, -1, -5], [-6, 2, 9, 5, -1, -5], [2, -6, 9, 5, -1, -5], [9, -6, 2, 5, -1, -5], [-6, 9, 2, 5, -1, -5], [2, 9, -6, 5, -1, -5], [9, 2, -6, 5, -1, -5], [5, -6, 2, 9, -1, -5], [-6, 5, 2, 9, -1, -5], [2, 5, -6, 9, -1, -5], [5, 2, -6, 9, -1, -5], [-6, 2, 5, 9, -1, -5], [2, -6, 5, 9, -1, -5], [-1, 9, 5, -6, 2, -5], [9, -1, 5, -6, 2, -5], [5, -1, 9, -6, 2, -5], [-1, 5, 9, -6, 2, -5], [9, 5, -1, -6, 2, -5], [5, 9, -1, -6, 2, -5], [-6, -1, 9, 5, 2, -5], [-1, -6, 9, 5, 2, -5], [9, -6, -1, 5, 2, -5], [-6, 9, -1, 5, 2, -5], [-1, 9, -6, 5, 2, -5], [9, -1, -6, 5, 2, -5], [5, -6, -1, 9, 2, -5], [-6, 5, -1, 9, 2, -5], [-1, 5, -6, 9, 2, -5], [5, -1, -6, 9, 2, -5], [-6, -1, 5, 9, 2, -5], [-1, -6, 5, 9, 2, -5], [9, 5, -6, -1, 2, -5], [5, 9, -6, -1, 2, -5], [-6, 9, 5, -1, 2, -5], [9, -6, 5, -1, 2, -5], [5, -6, 9, -1, 2, -5], [-6, 5, 9, -1, 2, -5], [2, -1, 9, 5, -6, -5], [-1, 2, 9, 5, -6, -5], [9, 2, -1, 5, -6, -5], [2, 9, -1, 5, -6, -5], [-1, 9, 2, 5, -6, -5], [9, -1, 2, 5, -6, -5], [5, 2, -1, 9, -6, -5], [2, 5, -1, 9, -6, -5], [-1, 5, 2, 9, -6, -5], [5, -1, 2, 9, -6, -5], [2, -1, 5, 9, -6, -5], [-1, 2, 5, 9, -6, -5], [9, 5, 2, -1, -6, -5], [5, 9, 2, -1, -6, -5], [2, 9, 5, -1, -6, -5], [9, 2, 5, -1, -6, -5], [5, 2, 9, -1, -6, -5], [2, 5, 9, -1, -6, -5], [-1, 9, 5, 2, -6, -5], [9, -1, 5, 2, -6, -5], [5, -1, 9, 2, -6, -5], [-1, 5, 9, 2, -6, -5], [9, 5, -1, 2, -6, -5], [5, 9, -1, 2, -6, -5], [-6, 2, -1, 9, 5, -5], [2, -6, -1, 9, 5, -5], [-1, -6, 2, 9, 5, -5], [-6, -1, 2, 9, 5, -5], [2, -1, -6, 9, 5, -5], [-1, 2, -6, 9, 5, -5], [9, -6, 2, -1, 5, -5], [-6, 9, 2, -1, 5, -5], [2, 9, -6, -1, 5, -5], [9, 2, -6, -1, 5, -5], [-6, 2, 9, -1, 5, -5], [2, -6, 9, -1, 5, -5], [-1, 9, -6, 2, 5, -5], [9, -1, -6, 2, 5, -5], [-6, -1, 9, 2, 5, -5], [-1, -6, 9, 2, 5, -5], [9, -6, -1, 2, 5, -5], [-6, 9, -1, 2, 5, -5], [2, -1, 9, -6, 5, -5], [-1, 2, 9, -6, 5, -5], [9, 2, -1, -6, 5, -5], [2, 9, -1, -6, 5, -5], [-1, 9, 2, -6, 5, -5], [9, -1, 2, -6, 5, -5], [-5, 5, -6, 2, -1, 9], [5, -5, -6, 2, -1, 9], [-6, -5, 5, 2, -1, 9], [-5, -6, 5, 2, -1, 9], [5, -6, -5, 2, -1, 9], [-6, 5, -5, 2, -1, 9], [2, -5, 5, -6, -1, 9], [-5, 2, 5, -6, -1, 9], [5, 2, -5, -6, -1, 9], [2, 5, -5, -6, -1, 9], [-5, 5, 2, -6, -1, 9], [5, -5, 2, -6, -1, 9], [-6, 2, -5, 5, -1, 9], [2, -6, -5, 5, -1, 9], [-5, -6, 2, 5, -1, 9], [-6, -5, 2, 5, -1, 9], [2, -5, -6, 5, -1, 9], [-5, 2, -6, 5, -1, 9], [5, -6, 2, -5, -1, 9], [-6, 5, 2, -5, -1, 9], [2, 5, -6, -5, -1, 9], [5, 2, -6, -5, -1, 9], [-6, 2, 5, -5, -1, 9], [2, -6, 5, -5, -1, 9], [-1, -5, 5, -6, 2, 9], [-5, -1, 5, -6, 2, 9], [5, -1, -5, -6, 2, 9], [-1, 5, -5, -6, 2, 9], [-5, 5, -1, -6, 2, 9], [5, -5, -1, -6, 2, 9], [-6, -1, -5, 5, 2, 9], [-1, -6, -5, 5, 2, 9], [-5, -6, -1, 5, 2, 9], [-6, -5, -1, 5, 2, 9], [-1, -5, -6, 5, 2, 9], [-5, -1, -6, 5, 2, 9], [5, -6, -1, -5, 2, 9], [-6, 5, -1, -5, 2, 9], [-1, 5, -6, -5, 2, 9], [5, -1, -6, -5, 2, 9], [-6, -1, 5, -5, 2, 9], [-1, -6, 5, -5, 2, 9], [-5, 5, -6, -1, 2, 9], [5, -5, -6, -1, 2, 9], [-6, -5, 5, -1, 2, 9], [-5, -6, 5, -1, 2, 9], [5, -6, -5, -1, 2, 9], [-6, 5, -5, -1, 2, 9], [2, -1, -5, 5, -6, 9], [-1, 2, -5, 5, -6, 9], [-5, 2, -1, 5, -6, 9], [2, -5, -1, 5, -6, 9], [-1, -5, 2, 5, -6, 9], [-5, -1, 2, 5, -6, 9], [5, 2, -1, -5, -6, 9], [2, 5, -1, -5, -6, 9], [-1, 5, 2, -5, -6, 9], [5, -1, 2, -5, -6, 9], [2, -1, 5, -5, -6, 9], [-1, 2, 5, -5, -6, 9], [-5, 5, 2, -1, -6, 9], [5, -5, 2, -1, -6, 9], [2, -5, 5, -1, -6, 9], [-5, 2, 5, -1, -6, 9], [5, 2, -5, -1, -6, 9], [2, 5, -5, -1, -6, 9], [-1, -5, 5, 2, -6, 9], [-5, -1, 5, 2, -6, 9], [5, -1, -5, 2, -6, 9], [-1, 5, -5, 2, -6, 9], [-5, 5, -1, 2, -6, 9], [5, -5, -1, 2, -6, 9], [-6, 2, -1, -5, 5, 9], [2, -6, -1, -5, 5, 9], [-1, -6, 2, -5, 5, 9], [-6, -1, 2, -5, 5, 9], [2, -1, -6, -5, 5, 9], [-1, 2, -6, -5, 5, 9], [-5, -6, 2, -1, 5, 9], [-6, -5, 2, -1, 5, 9], [2, -5, -6, -1, 5, 9], [-5, 2, -6, -1, 5, 9], [-6, 2, -5, -1, 5, 9], [2, -6, -5, -1, 5, 9], [-1, -5, -6, 2, 5, 9], [-5, -1, -6, 2, 5, 9], [-6, -1, -5, 2, 5, 9], [-1, -6, -5, 2, 5, 9], [-5, -6, -1, 2, 5, 9], [-6, -5, -1, 2, 5, 9], [2, -1, -5, -6, 5, 9], [-1, 2, -5, -6, 5, 9], [-5, 2, -1, -6, 5, 9], [2, -5, -1, -6, 5, 9], [-1, -5, 2, -6, 5, 9], [-5, -1, 2, -6, 5, 9], [5, -6, 2, -1, -5, 9], [-6, 5, 2, -1, -5, 9], [2, 5, -6, -1, -5, 9], [5, 2, -6, -1, -5, 9], [-6, 2, 5, -1, -5, 9], [2, -6, 5, -1, -5, 9], [-1, 5, -6, 2, -5, 9], [5, -1, -6, 2, -5, 9], [-6, -1, 5, 2, -5, 9], [-1, -6, 5, 2, -5, 9], [5, -6, -1, 2, -5, 9], [-6, 5, -1, 2, -5, 9], [2, -1, 5, -6, -5, 9], [-1, 2, 5, -6, -5, 9], [5, 2, -1, -6, -5, 9], [2, 5, -1, -6, -5, 9], [-1, 5, 2, -6, -5, 9], [5, -1, 2, -6, -5, 9], [-6, 2, -1, 5, -5, 9], [2, -6, -1, 5, -5, 9], [-1, -6, 2, 5, -5, 9], [-6, -1, 2, 5, -5, 9], [2, -1, -6, 5, -5, 9], [-1, 2, -6, 5, -5, 9]]
Input: {""nums"": [-4, -7, 7, 0]}
Output: [[0, 7, -7, -4], [7, 0, -7, -4], [-7, 0, 7, -4], [0, -7, 7, -4], [7, -7, 0, -4], [-7, 7, 0, -4], [-4, 0, 7, -7], [0, -4, 7, -7], [7, -4, 0, -7], [-4, 7, 0, -7], [0, 7, -4, -7], [7, 0, -4, -7], [-7, -4, 0, 7], [-4, -7, 0, 7], [0, -7, -4, 7], [-7, 0, -4, 7], [-4, 0, -7, 7], [0, -4, -7, 7], [7, -7, -4, 0], [-7, 7, -4, 0], [-4, 7, -7, 0], [7, -4, -7, 0], [-7, -4, 7, 0], [-4, -7, 7, 0]]
Input: {""nums"": [-3, 8, 5, 6, 7]}
Output: [[7, 6, 5, 8, -3], [6, 7, 5, 8, -3], [5, 7, 6, 8, -3], [7, 5, 6, 8, -3], [6, 5, 7, 8, -3], [5, 6, 7, 8, -3], [8, 7, 6, 5, -3], [7, 8, 6, 5, -3], [6, 8, 7, 5, -3], [8, 6, 7, 5, -3], [7, 6, 8, 5, -3], [6, 7, 8, 5, -3], [5, 8, 7, 6, -3], [8, 5, 7, 6, -3], [7, 5, 8, 6, -3], [5, 7, 8, 6, -3], [8, 7, 5, 6, -3], [7, 8, 5, 6, -3], [6, 5, 8, 7, -3], [5, 6, 8, 7, -3], [8, 6, 5, 7, -3], [6, 8, 5, 7, -3], [5, 8, 6, 7, -3], [8, 5, 6, 7, -3], [-3, 7, 6, 5, 8], [7, -3, 6, 5, 8], [6, -3, 7, 5, 8], [-3, 6, 7, 5, 8], [7, 6, -3, 5, 8], [6, 7, -3, 5, 8], [5, -3, 7, 6, 8], [-3, 5, 7, 6, 8], [7, 5, -3, 6, 8], [5, 7, -3, 6, 8], [-3, 7, 5, 6, 8], [7, -3, 5, 6, 8], [6, 5, -3, 7, 8], [5, 6, -3, 7, 8], [-3, 6, 5, 7, 8], [6, -3, 5, 7, 8], [5, -3, 6, 7, 8], [-3, 5, 6, 7, 8], [7, 6, 5, -3, 8], [6, 7, 5, -3, 8], [5, 7, 6, -3, 8], [7, 5, 6, -3, 8], [6, 5, 7, -3, 8], [5, 6, 7, -3, 8], [8, -3, 7, 6, 5], [-3, 8, 7, 6, 5], [7, 8, -3, 6, 5], [8, 7, -3, 6, 5], [-3, 7, 8, 6, 5], [7, -3, 8, 6, 5], [6, 8, -3, 7, 5], [8, 6, -3, 7, 5], [-3, 6, 8, 7, 5], [6, -3, 8, 7, 5], [8, -3, 6, 7, 5], [-3, 8, 6, 7, 5], [7, 6, 8, -3, 5], [6, 7, 8, -3, 5], [8, 7, 6, -3, 5], [7, 8, 6, -3, 5], [6, 8, 7, -3, 5], [8, 6, 7, -3, 5], [-3, 7, 6, 8, 5], [7, -3, 6, 8, 5], [6, -3, 7, 8, 5], [-3, 6, 7, 8, 5], [7, 6, -3, 8, 5], [6, 7, -3, 8, 5], [5, 8, -3, 7, 6], [8, 5, -3, 7, 6], [-3, 5, 8, 7, 6], [5, -3, 8, 7, 6], [8, -3, 5, 7, 6], [-3, 8, 5, 7, 6], [7, 5, 8, -3, 6], [5, 7, 8, -3, 6], [8, 7, 5, -3, 6], [7, 8, 5, -3, 6], [5, 8, 7, -3, 6], [8, 5, 7, -3, 6], [-3, 7, 5, 8, 6], [7, -3, 5, 8, 6], [5, -3, 7, 8, 6], [-3, 5, 7, 8, 6], [7, 5, -3, 8, 6], [5, 7, -3, 8, 6], [8, -3, 7, 5, 6], [-3, 8, 7, 5, 6], [7, 8, -3, 5, 6], [8, 7, -3, 5, 6], [-3, 7, 8, 5, 6], [7, -3, 8, 5, 6], [6, 5, 8, -3, 7], [5, 6, 8, -3, 7], [8, 6, 5, -3, 7], [6, 8, 5, -3, 7], [5, 8, 6, -3, 7], [8, 5, 6, -3, 7], [-3, 6, 5, 8, 7], [6, -3, 5, 8, 7], [5, -3, 6, 8, 7], [-3, 5, 6, 8, 7], [6, 5, -3, 8, 7], [5, 6, -3, 8, 7], [8, -3, 6, 5, 7], [-3, 8, 6, 5, 7], [6, 8, -3, 5, 7], [8, 6, -3, 5, 7], [-3, 6, 8, 5, 7], [6, -3, 8, 5, 7], [5, 8, -3, 6, 7], [8, 5, -3, 6, 7], [-3, 5, 8, 6, 7], [5, -3, 8, 6, 7], [8, -3, 5, 6, 7], [-3, 8, 5, 6, 7]]"
"In a certain scenario, you are tasked with identifying unique sets of three items from a collection of integers that, when combined, yield a total sum of zero. Given a list of integers named `nums`, what unique triplets can be found that satisfy this condition, ensuring that no duplicate combinations are included in the final result?

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of integers to find unique triplets that sum up to zero.

Output:
  `return` (List[List[int]]): A list of unique triplets, where each triplet is a list of three integers that sum to zero.","# import necessary packages
from typing import List

# all class and function definitions in the code file, if any
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        ans = []
        nums.sort()
        if not nums or nums[0] > 0 or nums[len(nums) - 1] < 0:
            return []
        for a in range(len(nums) - 2):
            if nums[a] > 0:
                break
            if a > 0 and nums[a] == nums[a - 1]:
                continue
            i, j = a + 1, len(nums) - 1
            while i < j:
                val = nums[a] + nums[i] + nums[j]
                if val < 0:
                    i += 1
                elif val > 0:
                    j -= 1
                else:
                    ans.append([nums[a], nums[i], nums[j]])
                    while i < j and nums[i] == nums[i + 1]:
                        i += 1
                    while i < j and nums[j] == nums[j - 1]:
                        j -= 1
                    i += 1
                    j -= 1
        return ans

# main function
def main_solution(nums):
    # Convert input to list of integers
    nums = list(map(int, nums))  
    # Initialize the Solution class
    solution = Solution()
    # Call the threeSum method and get the result
    result = solution.threeSum(nums)
    # Convert result to JSON serializable format
    return [list(triplet) for triplet in result]","import random

def input_generator():
    # Generate a random list of integers
    nums = random.sample(range(-10, 11), random.randint(3, 10))  # Random length between 3 and 10
    return {""nums"": nums}","[({'nums': [1, -8, -2, 6, -9, 8, -5, -10, -7]}, [[-9, 1, 8], [-7, 1, 6]]), ({'nums': [-7, -6, 4, 6, -3, 9, -4, -5, 7, 5]}, [[-6, -3, 9], [-5, -4, 9], [-4, -3, 7]]), ({'nums': [5, 4, -9, 2, 9, -5, -4, 7]}, [[-9, 2, 7], [-9, 4, 5], [-5, -4, 9]]), ({'nums': [3, -8, 10, 9, -3, -7, 8, -9]}, [[-7, -3, 10]]), ({'nums': [2, -7, 4, 9, -4, 0]}, [[-4, 0, 4]])]","In a certain scenario, you are tasked with identifying unique sets of three items from a collection of integers that, when combined, yield a total sum of zero. Given a list of integers named `nums`, what unique triplets can be found that satisfy this condition, ensuring that no duplicate combinations are included in the final result?

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of integers to find unique triplets that sum up to zero.

Output:
  `return` (List[List[int]]): A list of unique triplets, where each triplet is a list of three integers that sum to zero.

Examples:
Input: {""nums"": [1, -8, -2, 6, -9, 8, -5, -10, -7]}
Output: [[-9, 1, 8], [-7, 1, 6]]
Input: {""nums"": [-7, -6, 4, 6, -3, 9, -4, -5, 7, 5]}
Output: [[-6, -3, 9], [-5, -4, 9], [-4, -3, 7]]
Input: {""nums"": [5, 4, -9, 2, 9, -5, -4, 7]}
Output: [[-9, 2, 7], [-9, 4, 5], [-5, -4, 9]]
Input: {""nums"": [3, -8, 10, 9, -3, -7, 8, -9]}
Output: [[-7, -3, 10]]
Input: {""nums"": [2, -7, 4, 9, -4, 0]}
Output: [[-4, 0, 4]]"
"In a busy sorting center, an unsorted array of integers is delivered for sorting. Each integer represents an item that needs to be organized in ascending order to streamline the sorting process. Given an `unsorted_array`, can you determine what the final sorted order of the items will be after applying the quicksort algorithm? Please return the sorted array.

The input and output requirements are as follows:

Input:
  `unsorted_array` (list): A list of integers that need to be sorted.

Output:
  `return` (list): A sorted list of integers in ascending order.","# import necessary packages
import json

# all class and function definitions in the code file
class QuickSort(object):
    """"""Quicksort implementation""""""

    def __init__(self, unsorted_array):
        """"""Initialize an array for quicksort""""""
        self.array_to_sort = unsorted_array
        self.is_sorted = False

    def swap(self, swap_x, swap_y):
        """"""Swap two elements of an array""""""
        tmp = self.array_to_sort[swap_x]
        self.array_to_sort[swap_x] = self.array_to_sort[swap_y]
        self.array_to_sort[swap_y] = tmp

    def partition(self, lo_index, hi_index):
        """"""Partition the array""""""        
        pivot = self.array_to_sort[hi_index]
        insert_here = lo_index - 1 

        for from_here in range(lo_index, hi_index):
            if self.array_to_sort[from_here] <= pivot:
                insert_here = insert_here + 1
                self.swap(insert_here, from_here)

        self.swap(insert_here + 1, hi_index)
        return insert_here + 1

    def quicksort(self, lo_index, hi_index):
        """"""Quicksort a slice of the array""""""
        if lo_index < hi_index:
            partition_index = self.partition(lo_index, hi_index)
            self.quicksort(lo_index, partition_index - 1)
            self.quicksort(partition_index + 1, hi_index)

# main function
def main_solution(unsorted_array):
    """"""
    Sorts an array using the quicksort algorithm.
    
    Args:
        unsorted_array (list): A list of integers to be sorted.
        
    Returns:
        list: A sorted list of integers.
    """"""
    # Create an instance of QuickSort
    quicksort_instance = QuickSort(unsorted_array)
    quicksort_instance.quicksort(0, len(quicksort_instance.array_to_sort) - 1)
    
    # Return the sorted array
    return quicksort_instance.array_to_sort","import random

def input_generator():
    # generate input arguments for the main_solution function
    unsorted_array = random.sample(range(1, 100), random.randint(5, 15))  # Random list of 5 to 15 unique integers
    return {""unsorted_array"": unsorted_array}","[({'unsorted_array': [5, 7, 12, 25, 29, 31, 37, 41, 44, 49, 52, 80, 88]}, [5, 7, 12, 25, 29, 31, 37, 41, 44, 49, 52, 80, 88]), ({'unsorted_array': [13, 22, 27, 34, 37, 38, 43, 47, 51, 56, 73, 77, 87, 97, 98]}, [13, 22, 27, 34, 37, 38, 43, 47, 51, 56, 73, 77, 87, 97, 98]), ({'unsorted_array': [5, 20, 42, 44, 52, 55, 69, 79, 83, 88]}, [5, 20, 42, 44, 52, 55, 69, 79, 83, 88]), ({'unsorted_array': [3, 16, 40, 55, 65, 71, 75, 78, 91, 95, 96, 97]}, [3, 16, 40, 55, 65, 71, 75, 78, 91, 95, 96, 97]), ({'unsorted_array': [3, 32, 36, 40, 55, 57, 60, 64, 82, 89, 95]}, [3, 32, 36, 40, 55, 57, 60, 64, 82, 89, 95])]","In a busy sorting center, an unsorted array of integers is delivered for sorting. Each integer represents an item that needs to be organized in ascending order to streamline the sorting process. Given an `unsorted_array`, can you determine what the final sorted order of the items will be after applying the quicksort algorithm? Please return the sorted array.

The input and output requirements are as follows:

Input:
  `unsorted_array` (list): A list of integers that need to be sorted.

Output:
  `return` (list): A sorted list of integers in ascending order.

Examples:
Input: {""unsorted_array"": [5, 7, 12, 25, 29, 31, 37, 41, 44, 49, 52, 80, 88]}
Output: [5, 7, 12, 25, 29, 31, 37, 41, 44, 49, 52, 80, 88]
Input: {""unsorted_array"": [13, 22, 27, 34, 37, 38, 43, 47, 51, 56, 73, 77, 87, 97, 98]}
Output: [13, 22, 27, 34, 37, 38, 43, 47, 51, 56, 73, 77, 87, 97, 98]
Input: {""unsorted_array"": [5, 20, 42, 44, 52, 55, 69, 79, 83, 88]}
Output: [5, 20, 42, 44, 52, 55, 69, 79, 83, 88]
Input: {""unsorted_array"": [3, 16, 40, 55, 65, 71, 75, 78, 91, 95, 96, 97]}
Output: [3, 16, 40, 55, 65, 71, 75, 78, 91, 95, 96, 97]
Input: {""unsorted_array"": [3, 32, 36, 40, 55, 57, 60, 64, 82, 89, 95]}
Output: [3, 32, 36, 40, 55, 57, 60, 64, 82, 89, 95]"
"In a busy sorting center, an unsorted array of integers is delivered for sorting. Each integer represents an item that needs to be organized in ascending order to streamline the sorting process. Given an `unsorted_array`, can you determine what the final sorted order of the items will be after applying the quicksort algorithm? Please return the sorted array.

The input and output requirements are as follows:

Input:
  `unsorted_array` (list): A list of integers that need to be sorted.

Output:
  `return` (list): A sorted list of integers in ascending order.","# import necessary packages
import json

# all class and function definitions in the code file
class QuickSort(object):
    """"""Quicksort implementation""""""

    def __init__(self, unsorted_array):
        """"""Initialize an array for quicksort""""""
        self.array_to_sort = unsorted_array
        self.is_sorted = False

    def swap(self, swap_x, swap_y):
        """"""Swap two elements of an array""""""
        tmp = self.array_to_sort[swap_x]
        self.array_to_sort[swap_x] = self.array_to_sort[swap_y]
        self.array_to_sort[swap_y] = tmp

    def partition(self, lo_index, hi_index):
        """"""Partition the array""""""        
        pivot = self.array_to_sort[hi_index]
        insert_here = lo_index - 1 

        for from_here in range(lo_index, hi_index):
            if self.array_to_sort[from_here] <= pivot:
                insert_here = insert_here + 1
                self.swap(insert_here, from_here)

        self.swap(insert_here + 1, hi_index)
        return insert_here + 1

    def quicksort(self, lo_index, hi_index):
        """"""Quicksort a slice of the array""""""
        if lo_index < hi_index:
            partition_index = self.partition(lo_index, hi_index)
            self.quicksort(lo_index, partition_index - 1)
            self.quicksort(partition_index + 1, hi_index)

# main function
def main_solution(unsorted_array):
    """"""
    Sorts an array using the quicksort algorithm.
    
    Args:
        unsorted_array (list): A list of integers to be sorted.
        
    Returns:
        list: A sorted list of integers.
    """"""
    # Create an instance of QuickSort
    quicksort_instance = QuickSort(unsorted_array)
    quicksort_instance.quicksort(0, len(quicksort_instance.array_to_sort) - 1)
    
    # Return the sorted array
    return quicksort_instance.array_to_sort","import random

def input_generator():
    # generate input arguments for the main_solution function
    unsorted_array = random.sample(range(1, 100), random.randint(5, 15))  # Random list of 5 to 15 unique integers
    return {""unsorted_array"": unsorted_array}","[({'unsorted_array': [3, 10, 23, 27, 43, 47, 49, 51, 60, 64, 86, 95]}, [3, 10, 23, 27, 43, 47, 49, 51, 60, 64, 86, 95]), ({'unsorted_array': [2, 6, 23, 29, 34, 45, 51, 55, 58, 69, 92]}, [2, 6, 23, 29, 34, 45, 51, 55, 58, 69, 92]), ({'unsorted_array': [3, 5, 7, 13, 22, 23, 27, 28, 56, 65, 68, 69, 70, 91, 95]}, [3, 5, 7, 13, 22, 23, 27, 28, 56, 65, 68, 69, 70, 91, 95]), ({'unsorted_array': [7, 8, 10, 11, 47, 68, 72, 78, 91, 92, 99]}, [7, 8, 10, 11, 47, 68, 72, 78, 91, 92, 99]), ({'unsorted_array': [2, 19, 22, 53, 55, 60, 64, 66, 83, 87, 88]}, [2, 19, 22, 53, 55, 60, 64, 66, 83, 87, 88])]","In a busy sorting center, an unsorted array of integers is delivered for sorting. Each integer represents an item that needs to be organized in ascending order to streamline the sorting process. Given an `unsorted_array`, can you determine what the final sorted order of the items will be after applying the quicksort algorithm? Please return the sorted array.

The input and output requirements are as follows:

Input:
  `unsorted_array` (list): A list of integers that need to be sorted.

Output:
  `return` (list): A sorted list of integers in ascending order.

Examples:
Input: {""unsorted_array"": [3, 10, 23, 27, 43, 47, 49, 51, 60, 64, 86, 95]}
Output: [3, 10, 23, 27, 43, 47, 49, 51, 60, 64, 86, 95]
Input: {""unsorted_array"": [2, 6, 23, 29, 34, 45, 51, 55, 58, 69, 92]}
Output: [2, 6, 23, 29, 34, 45, 51, 55, 58, 69, 92]
Input: {""unsorted_array"": [3, 5, 7, 13, 22, 23, 27, 28, 56, 65, 68, 69, 70, 91, 95]}
Output: [3, 5, 7, 13, 22, 23, 27, 28, 56, 65, 68, 69, 70, 91, 95]
Input: {""unsorted_array"": [7, 8, 10, 11, 47, 68, 72, 78, 91, 92, 99]}
Output: [7, 8, 10, 11, 47, 68, 72, 78, 91, 92, 99]
Input: {""unsorted_array"": [2, 19, 22, 53, 55, 60, 64, 66, 83, 87, 88]}
Output: [2, 19, 22, 53, 55, 60, 64, 66, 83, 87, 88]"
"In combinatorial mathematics, Pascal's Triangle is a triangular array of the binomial coefficients. Each number is the sum of the two directly above it. Given a positive integer `lines`, how can you generate Pascal's Triangle up to that number of rows? What will the structure of the triangle look like when represented as a list of lists, where each inner list corresponds to a row in the triangle?

The input and output requirements are as follows:

Input:
  `lines` (int): The number of rows to generate in Pascal's Triangle. It should be a positive integer.

Output:
  `return` (list): A list of lists where each inner list represents a row of Pascal's Triangle. Each element in the inner list is an integer representing the value in that position of the triangle.","# import necessary packages
import sys

# Function to calculate the value of a single cell in Pascal's Triangle
def calculate_one(line, place):
    if place == 1 or line == place:
        return 1
    else:
        return calculate_one(line - 1, place - 1) + calculate_one(line - 1, place)

# Function to generate a single line of Pascal's Triangle
def write_line(line):
    return [calculate_one(line, i) for i in range(1, line + 1)]

# Main function
def main_solution(lines):
    """"""
    This function generates Pascal's Triangle up to the specified number of lines.

    Input:
      `lines` (int): The number of rows to generate in Pascal's Triangle.

    Output:
      `return` (list): A list of lists representing the rows of Pascal's Triangle.
    """"""
    triangle = [write_line(i) for i in range(1, lines + 1)]
    return triangle","import random

def input_generator():
    # generate input arguments for the main_solution function
    lines = random.randint(1, 10)  # Randomly generate a number of lines between 1 and 10
    return {""lines"": lines}","[({'lines': 8}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]), ({'lines': 5}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]), ({'lines': 4}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]), ({'lines': 5}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]), ({'lines': 1}, [[1]])]","In combinatorial mathematics, Pascal's Triangle is a triangular array of the binomial coefficients. Each number is the sum of the two directly above it. Given a positive integer `lines`, how can you generate Pascal's Triangle up to that number of rows? What will the structure of the triangle look like when represented as a list of lists, where each inner list corresponds to a row in the triangle?

The input and output requirements are as follows:

Input:
  `lines` (int): The number of rows to generate in Pascal's Triangle. It should be a positive integer.

Output:
  `return` (list): A list of lists where each inner list represents a row of Pascal's Triangle. Each element in the inner list is an integer representing the value in that position of the triangle.

Examples:
Input: {""lines"": 8}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]
Input: {""lines"": 5}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
Input: {""lines"": 4}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]
Input: {""lines"": 5}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
Input: {""lines"": 1}
Output: [[1]]"
"In combinatorial mathematics, Pascal's Triangle is a triangular array of the binomial coefficients. Each number is the sum of the two directly above it. Given a positive integer `lines`, how can you generate Pascal's Triangle up to that number of rows? What will the structure of the triangle look like when represented as a list of lists, where each inner list corresponds to a row in the triangle?

The input and output requirements are as follows:

Input:
  `lines` (int): The number of rows to generate in Pascal's Triangle. It should be a positive integer.

Output:
  `return` (list): A list of lists where each inner list represents a row of Pascal's Triangle. Each element in the inner list is an integer representing the value in that position of the triangle.","# import necessary packages
import sys

# Function to calculate the value of a single cell in Pascal's Triangle
def calculate_one(line, place):
    if place == 1 or line == place:
        return 1
    else:
        return calculate_one(line - 1, place - 1) + calculate_one(line - 1, place)

# Function to generate a single line of Pascal's Triangle
def write_line(line):
    return [calculate_one(line, i) for i in range(1, line + 1)]

# Main function
def main_solution(lines):
    """"""
    This function generates Pascal's Triangle up to the specified number of lines.

    Input:
      `lines` (int): The number of rows to generate in Pascal's Triangle.

    Output:
      `return` (list): A list of lists representing the rows of Pascal's Triangle.
    """"""
    triangle = [write_line(i) for i in range(1, lines + 1)]
    return triangle","import random

def input_generator():
    # generate input arguments for the main_solution function
    lines = random.randint(1, 10)  # Randomly generate a number of lines between 1 and 10
    return {""lines"": lines}","[({'lines': 3}, [[1], [1, 1], [1, 2, 1]]), ({'lines': 10}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]), ({'lines': 3}, [[1], [1, 1], [1, 2, 1]]), ({'lines': 8}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]), ({'lines': 4}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]])]","In combinatorial mathematics, Pascal's Triangle is a triangular array of the binomial coefficients. Each number is the sum of the two directly above it. Given a positive integer `lines`, how can you generate Pascal's Triangle up to that number of rows? What will the structure of the triangle look like when represented as a list of lists, where each inner list corresponds to a row in the triangle?

The input and output requirements are as follows:

Input:
  `lines` (int): The number of rows to generate in Pascal's Triangle. It should be a positive integer.

Output:
  `return` (list): A list of lists where each inner list represents a row of Pascal's Triangle. Each element in the inner list is an integer representing the value in that position of the triangle.

Examples:
Input: {""lines"": 3}
Output: [[1], [1, 1], [1, 2, 1]]
Input: {""lines"": 10}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]
Input: {""lines"": 3}
Output: [[1], [1, 1], [1, 2, 1]]
Input: {""lines"": 8}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]
Input: {""lines"": 4}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]"
"In a linked list, nodes can be reversed in groups of a specified size. Given a list of integers representing the values in the linked list and an integer representing the size of the groups, how can you determine the new order of the nodes after reversing them in groups of that size? Please specify the linked list values as `head` and the group size as `k`, and return the resulting order of the linked list values after the operations.

The input and output requirements are as follows:

Input:
  `head` (list of integers): A list of integers representing the values in the linked list.
  `k` (int): An integer representing the size of the groups to reverse.

Output:
  `return` (list of integers): A list of integers representing the values in the linked list after reversing nodes in k-group.","# import necessary packages
# No external packages are required for the given problem.

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# main function
def main_solution(head, k):
    # Convert the input list represented as a list of integers to a linked list
    def create_linked_list(arr):
        if not arr:
            return None
        head = ListNode(arr[0])
        current = head
        for value in arr[1:]:
            current.next = ListNode(value)
            current = current.next
        return head
    
    # Convert the linked list back to a list for output
    def linked_list_to_list(node):
        result = []
        while node:
            result.append(node.val)
            node = node.next
        return result

    # Length of the linked list
    def length(root):
        itr = root
        a = 0
        while itr:
            itr = itr.next
            a += 1
        return a

    # Reverse the nodes in k-group
    def reverse(head, k, l):
        if l < k:
            return head
        c = 0
        prev = None
        curr = head
        while c < k and curr is not None:
            nex = curr.next
            curr.next = prev
            prev = curr
            curr = nex
            c += 1
        if curr is not None:
            head.next = reverse(curr, k, l - k)
        return prev

    # Convert head input to linked list
    head = create_linked_list(head)
    
    # Call the reverseKGroup logic
    new_head = reverse(head, k, length(head))
    
    # Convert the output linked list back to a list
    return linked_list_to_list(new_head)","import random

def input_generator():
    head_length = random.randint(1, 10)  # Length of the linked list between 1 and 10
    head = [random.randint(1, 100) for _ in range(head_length)]  # Random integers for linked list values
    k = random.randint(1, 5)  # Random k value between 1 and 5
    return {""head"": head, ""k"": k}","[({'head': [46, 66], 'k': 2}, [66, 46]), ({'head': [90, 60, 35, 24, 55, 94], 'k': 2}, [60, 90, 24, 35, 94, 55]), ({'head': [79, 48, 87, 88, 95, 13, 76, 70, 21, 11], 'k': 1}, [79, 48, 87, 88, 95, 13, 76, 70, 21, 11]), ({'head': [71, 37, 88, 65, 3, 62, 27, 91, 36], 'k': 4}, [65, 88, 37, 71, 91, 27, 62, 3, 36]), ({'head': [44, 66, 67], 'k': 3}, [67, 66, 44])]","In a linked list, nodes can be reversed in groups of a specified size. Given a list of integers representing the values in the linked list and an integer representing the size of the groups, how can you determine the new order of the nodes after reversing them in groups of that size? Please specify the linked list values as `head` and the group size as `k`, and return the resulting order of the linked list values after the operations.

The input and output requirements are as follows:

Input:
  `head` (list of integers): A list of integers representing the values in the linked list.
  `k` (int): An integer representing the size of the groups to reverse.

Output:
  `return` (list of integers): A list of integers representing the values in the linked list after reversing nodes in k-group.

Examples:
Input: {""head"": [46, 66], ""k"": 2}
Output: [66, 46]
Input: {""head"": [90, 60, 35, 24, 55, 94], ""k"": 2}
Output: [60, 90, 24, 35, 94, 55]
Input: {""head"": [79, 48, 87, 88, 95, 13, 76, 70, 21, 11], ""k"": 1}
Output: [79, 48, 87, 88, 95, 13, 76, 70, 21, 11]
Input: {""head"": [71, 37, 88, 65, 3, 62, 27, 91, 36], ""k"": 4}
Output: [65, 88, 37, 71, 91, 27, 62, 3, 36]
Input: {""head"": [44, 66, 67], ""k"": 3}
Output: [67, 66, 44]"
"In combinatorial mathematics, Pascal's Triangle is a triangular array of the binomial coefficients. Each number is the sum of the two directly above it. Given a positive integer `lines`, how can you generate Pascal's Triangle up to that number of rows? What will the structure of the triangle look like when represented as a list of lists, where each inner list corresponds to a row in the triangle?

The input and output requirements are as follows:

Input:
  `lines` (int): The number of rows to generate in Pascal's Triangle. It should be a positive integer.

Output:
  `return` (list): A list of lists where each inner list represents a row of Pascal's Triangle. Each element in the inner list is an integer representing the value in that position of the triangle.","# import necessary packages
import sys

# Function to calculate the value of a single cell in Pascal's Triangle
def calculate_one(line, place):
    if place == 1 or line == place:
        return 1
    else:
        return calculate_one(line - 1, place - 1) + calculate_one(line - 1, place)

# Function to generate a single line of Pascal's Triangle
def write_line(line):
    return [calculate_one(line, i) for i in range(1, line + 1)]

# Main function
def main_solution(lines):
    """"""
    This function generates Pascal's Triangle up to the specified number of lines.

    Input:
      `lines` (int): The number of rows to generate in Pascal's Triangle.

    Output:
      `return` (list): A list of lists representing the rows of Pascal's Triangle.
    """"""
    triangle = [write_line(i) for i in range(1, lines + 1)]
    return triangle","import random

def input_generator():
    # generate input arguments for the main_solution function
    lines = random.randint(1, 10)  # Randomly generate a number of lines between 1 and 10
    return {""lines"": lines}","[({'lines': 2}, [[1], [1, 1]]), ({'lines': 3}, [[1], [1, 1], [1, 2, 1]]), ({'lines': 6}, [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]), ({'lines': 1}, [[1]]), ({'lines': 2}, [[1], [1, 1]])]","In combinatorial mathematics, Pascal's Triangle is a triangular array of the binomial coefficients. Each number is the sum of the two directly above it. Given a positive integer `lines`, how can you generate Pascal's Triangle up to that number of rows? What will the structure of the triangle look like when represented as a list of lists, where each inner list corresponds to a row in the triangle?

The input and output requirements are as follows:

Input:
  `lines` (int): The number of rows to generate in Pascal's Triangle. It should be a positive integer.

Output:
  `return` (list): A list of lists where each inner list represents a row of Pascal's Triangle. Each element in the inner list is an integer representing the value in that position of the triangle.

Examples:
Input: {""lines"": 2}
Output: [[1], [1, 1]]
Input: {""lines"": 3}
Output: [[1], [1, 1], [1, 2, 1]]
Input: {""lines"": 6}
Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]
Input: {""lines"": 1}
Output: [[1]]
Input: {""lines"": 2}
Output: [[1], [1, 1]]"
"In a digital library, users often search for specific books using their unique identification numbers. Given a list of identification numbers that may be sorted in either ascending or descending order, how can you efficiently determine the position of a specific book identified by its number? 

You need to find the index of the book identified by `target` in the list of `arr`. If the book is not found, return -1.

The input and output requirements are as follows:

Input:
  `arr` (list of int): A list of integers, which may be sorted in ascending or descending order.
  `target` (int): The integer value to search for in the list.

Output:
  `return` (int): The index of the target integer in the list if found; otherwise, return -1.","# import necessary packages
import json

# all class and function definitions in the code file, if any
# they will be used in the main_solution function, you may need to modify them to meet the requirements of the main_solution function (optional)

def binary_search(arr, target, start, end):
    midpoint = (start + end) // 2
    if start > end:
        return -1
    if arr[midpoint] == target:
        return midpoint

    if arr[midpoint] > target:
        return binary_search(arr, target, start, midpoint - 1)
    else:
        return binary_search(arr, target, midpoint + 1, end)

def agnostic_binary_search(arr, target):
    isAsc, start, end = False, 0, len(arr) - 1
    if len(arr) >= 2:
        if arr[0] < arr[-1]:
            isAsc = True

    while start <= end:
        midpoint = (start + end) // 2
        if arr[midpoint] == target:
            return midpoint
        if isAsc:
            if arr[midpoint] > target:
                end = midpoint - 1
            else:
                start = midpoint + 1
        else:
            if arr[midpoint] > target:
                start = midpoint + 1
            else:
                end = midpoint - 1
    return -1

# main function
def main_solution(arr, target):
    # Convert input to appropriate types
    if len(arr) == 0:
        return -1  # If the array is empty, return -1
    # Call the agnostic binary search function
    index = agnostic_binary_search(arr, target)
    # return, the returned value must be json serializable (no self-defined objects, functions, np.array, set, tuple, etc.)
    return index","import random

def input_generator():
    # Generate a random list of integers
    arr_length = random.randint(1, 10)  # Random length between 1 and 10
    arr = random.sample(range(-100, 100), arr_length)  # Unique integers between -100 and 100
    target = random.choice(arr)  # Randomly select a target from the array
    return {""arr"": arr, ""target"": target}","[({'arr': [-33], 'target': -33}, 0), ({'arr': [-94, -41, -82, 24, -88, 71], 'target': -41}, -1), ({'arr': [-57, 76, 43], 'target': 76}, 1), ({'arr': [16, 61, 20], 'target': 20}, -1), ({'arr': [27, -14, -35, -38], 'target': 27}, 0)]","In a digital library, users often search for specific books using their unique identification numbers. Given a list of identification numbers that may be sorted in either ascending or descending order, how can you efficiently determine the position of a specific book identified by its number? 

You need to find the index of the book identified by `target` in the list of `arr`. If the book is not found, return -1.

The input and output requirements are as follows:

Input:
  `arr` (list of int): A list of integers, which may be sorted in ascending or descending order.
  `target` (int): The integer value to search for in the list.

Output:
  `return` (int): The index of the target integer in the list if found; otherwise, return -1.

Examples:
Input: {""arr"": [-33], ""target"": -33}
Output: 0
Input: {""arr"": [-94, -41, -82, 24, -88, 71], ""target"": -41}
Output: -1
Input: {""arr"": [-57, 76, 43], ""target"": 76}
Output: 1
Input: {""arr"": [16, 61, 20], ""target"": 20}
Output: -1
Input: {""arr"": [27, -14, -35, -38], ""target"": 27}
Output: 0"
"In a busy sorting center, an unsorted array of integers is delivered for sorting. Each integer represents an item that needs to be organized in ascending order to streamline the sorting process. Given an `unsorted_array`, can you determine what the final sorted order of the items will be after applying the quicksort algorithm? Please return the sorted array.

The input and output requirements are as follows:

Input:
  `unsorted_array` (list): A list of integers that need to be sorted.

Output:
  `return` (list): A sorted list of integers in ascending order.","# import necessary packages
import json

# all class and function definitions in the code file
class QuickSort(object):
    """"""Quicksort implementation""""""

    def __init__(self, unsorted_array):
        """"""Initialize an array for quicksort""""""
        self.array_to_sort = unsorted_array
        self.is_sorted = False

    def swap(self, swap_x, swap_y):
        """"""Swap two elements of an array""""""
        tmp = self.array_to_sort[swap_x]
        self.array_to_sort[swap_x] = self.array_to_sort[swap_y]
        self.array_to_sort[swap_y] = tmp

    def partition(self, lo_index, hi_index):
        """"""Partition the array""""""        
        pivot = self.array_to_sort[hi_index]
        insert_here = lo_index - 1 

        for from_here in range(lo_index, hi_index):
            if self.array_to_sort[from_here] <= pivot:
                insert_here = insert_here + 1
                self.swap(insert_here, from_here)

        self.swap(insert_here + 1, hi_index)
        return insert_here + 1

    def quicksort(self, lo_index, hi_index):
        """"""Quicksort a slice of the array""""""
        if lo_index < hi_index:
            partition_index = self.partition(lo_index, hi_index)
            self.quicksort(lo_index, partition_index - 1)
            self.quicksort(partition_index + 1, hi_index)

# main function
def main_solution(unsorted_array):
    """"""
    Sorts an array using the quicksort algorithm.
    
    Args:
        unsorted_array (list): A list of integers to be sorted.
        
    Returns:
        list: A sorted list of integers.
    """"""
    # Create an instance of QuickSort
    quicksort_instance = QuickSort(unsorted_array)
    quicksort_instance.quicksort(0, len(quicksort_instance.array_to_sort) - 1)
    
    # Return the sorted array
    return quicksort_instance.array_to_sort","import random

def input_generator():
    # generate input arguments for the main_solution function
    unsorted_array = random.sample(range(1, 100), random.randint(5, 15))  # Random list of 5 to 15 unique integers
    return {""unsorted_array"": unsorted_array}","[({'unsorted_array': [9, 10, 18, 23, 29, 36, 67]}, [9, 10, 18, 23, 29, 36, 67]), ({'unsorted_array': [3, 5, 7, 18, 25, 28, 36, 44, 48, 50, 53, 56, 59, 63, 91]}, [3, 5, 7, 18, 25, 28, 36, 44, 48, 50, 53, 56, 59, 63, 91]), ({'unsorted_array': [4, 21, 37, 55, 73, 84, 86]}, [4, 21, 37, 55, 73, 84, 86]), ({'unsorted_array': [1, 60, 62, 65, 67, 70, 72, 73, 86, 90, 94, 95, 96]}, [1, 60, 62, 65, 67, 70, 72, 73, 86, 90, 94, 95, 96]), ({'unsorted_array': [22, 33, 35, 39, 41, 46, 52, 71, 93, 98]}, [22, 33, 35, 39, 41, 46, 52, 71, 93, 98])]","In a busy sorting center, an unsorted array of integers is delivered for sorting. Each integer represents an item that needs to be organized in ascending order to streamline the sorting process. Given an `unsorted_array`, can you determine what the final sorted order of the items will be after applying the quicksort algorithm? Please return the sorted array.

The input and output requirements are as follows:

Input:
  `unsorted_array` (list): A list of integers that need to be sorted.

Output:
  `return` (list): A sorted list of integers in ascending order.

Examples:
Input: {""unsorted_array"": [9, 10, 18, 23, 29, 36, 67]}
Output: [9, 10, 18, 23, 29, 36, 67]
Input: {""unsorted_array"": [3, 5, 7, 18, 25, 28, 36, 44, 48, 50, 53, 56, 59, 63, 91]}
Output: [3, 5, 7, 18, 25, 28, 36, 44, 48, 50, 53, 56, 59, 63, 91]
Input: {""unsorted_array"": [4, 21, 37, 55, 73, 84, 86]}
Output: [4, 21, 37, 55, 73, 84, 86]
Input: {""unsorted_array"": [1, 60, 62, 65, 67, 70, 72, 73, 86, 90, 94, 95, 96]}
Output: [1, 60, 62, 65, 67, 70, 72, 73, 86, 90, 94, 95, 96]
Input: {""unsorted_array"": [22, 33, 35, 39, 41, 46, 52, 71, 93, 98]}
Output: [22, 33, 35, 39, 41, 46, 52, 71, 93, 98]"
"In a data processing task, you have been given multiple sorted lists of integers representing linked-lists. Each linked-list contains integers in ascending order, and your goal is to combine all of these linked-lists into a single sorted list. 

What will be the final sorted list after merging the provided linked-lists represented by the variable `lists`?

The input and output requirements are as follows:

Input:
  `lists` (List[List[Optional[int]]]): A list of k linked-lists, where each linked-list is represented as a list of integers sorted in ascending order. Each inner list can be empty, and the total number of elements across all lists will not exceed 10,000.

Output:
  `return` (List[int]): A single list containing all the elements from the input linked-lists, merged and sorted in ascending order.","# import necessary packages
from typing import List, Optional
from queue import PriorityQueue

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# main function
def main_solution(lists: List[List[Optional[int]]]) -> List[int]:
    # Convert input lists of lists into a list of ListNode
    linked_lists = []
    for lst in lists:
        dummy = ListNode(0)
        current = dummy
        for value in lst:
            current.next = ListNode(value)
            current = current.next
        linked_lists.append(dummy.next)

    dummy = ListNode(0)
    cur = dummy
    q = PriorityQueue()
    for i, node in enumerate(linked_lists):
        if node:
            q.put((node.val, i))
    
    while not q.empty():
        _, i = q.get()
        cur.next = linked_lists[i]
        cur = cur.next
        if linked_lists[i].next:
            linked_lists[i] = linked_lists[i].next
            q.put((linked_lists[i].val, i))
    
    # Prepare output as a list of integers
    result = []
    cur = dummy.next
    while cur:
        result.append(cur.val)
        cur = cur.next

    return result","import random

def input_generator():
    k = random.randint(0, 10)  # Number of linked-lists
    lists = []
    for _ in range(k):
        length = random.randint(0, 5)  # Length of each linked-list
        if length > 0:
            lst = sorted(random.sample(range(-10, 11), length))  # Random integers between -10 and 10, sorted
            lists.append(lst)
        else:
            lists.append([])  # Empty linked-list
    return {""lists"": lists}","[({'lists': [[], [5, 6, 10], []]}, [5, 6, 10]), ({'lists': [[-4, 5, 9]]}, [-4, 5, 9]), ({'lists': [[-8, -3, -2, 4, 10], [-4, -3, 1, 3], [-6, -3, 0, 7, 9], [-2], [-3, 4], [-6, -5, 4], [-8, 5], [-4, -2, 0, 6]]}, [-8, -8, -6, -6, -5, -4, -4, -3, -3, -3, -3, -2, -2, -2, 0, 0, 1, 3, 4, 4, 4, 5, 6, 7, 9, 10]), ({'lists': [[-7, 3, 4, 6, 8], [0, 4, 9], [7, 8], [1], [-1], [-5, 4], [5], [3, 8], []]}, [-7, -5, -1, 0, 1, 3, 3, 4, 4, 4, 5, 6, 7, 8, 8, 8, 9]), ({'lists': [[-7, -2, 0, 1, 10], [-6, -2, 0, 5, 10], [-4, -1], [-3, -1, 3, 6, 10], [-2, 4, 6, 9], [0], [-4, 1, 3, 5, 8]]}, [-7, -6, -4, -4, -3, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 3, 3, 4, 5, 5, 6, 6, 8, 9, 10, 10, 10])]","In a data processing task, you have been given multiple sorted lists of integers representing linked-lists. Each linked-list contains integers in ascending order, and your goal is to combine all of these linked-lists into a single sorted list. 

What will be the final sorted list after merging the provided linked-lists represented by the variable `lists`?

The input and output requirements are as follows:

Input:
  `lists` (List[List[Optional[int]]]): A list of k linked-lists, where each linked-list is represented as a list of integers sorted in ascending order. Each inner list can be empty, and the total number of elements across all lists will not exceed 10,000.

Output:
  `return` (List[int]): A single list containing all the elements from the input linked-lists, merged and sorted in ascending order.

Examples:
Input: {""lists"": [[], [5, 6, 10], []]}
Output: [5, 6, 10]
Input: {""lists"": [[-4, 5, 9]]}
Output: [-4, 5, 9]
Input: {""lists"": [[-8, -3, -2, 4, 10], [-4, -3, 1, 3], [-6, -3, 0, 7, 9], [-2], [-3, 4], [-6, -5, 4], [-8, 5], [-4, -2, 0, 6]]}
Output: [-8, -8, -6, -6, -5, -4, -4, -3, -3, -3, -3, -2, -2, -2, 0, 0, 1, 3, 4, 4, 4, 5, 6, 7, 9, 10]
Input: {""lists"": [[-7, 3, 4, 6, 8], [0, 4, 9], [7, 8], [1], [-1], [-5, 4], [5], [3, 8], []]}
Output: [-7, -5, -1, 0, 1, 3, 3, 4, 4, 4, 5, 6, 7, 8, 8, 8, 9]
Input: {""lists"": [[-7, -2, 0, 1, 10], [-6, -2, 0, 5, 10], [-4, -1], [-3, -1, 3, 6, 10], [-2, 4, 6, 9], [0], [-4, 1, 3, 5, 8]]}
Output: [-7, -6, -4, -4, -3, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 3, 3, 4, 5, 5, 6, 6, 8, 9, 10, 10, 10]"
"In a linked list, nodes can be reversed in groups of a specified size. Given a list of integers representing the values in the linked list and an integer representing the size of the groups, how can you determine the new order of the nodes after reversing them in groups of that size? Please specify the linked list values as `head` and the group size as `k`, and return the resulting order of the linked list values after the operations.

The input and output requirements are as follows:

Input:
  `head` (list of integers): A list of integers representing the values in the linked list.
  `k` (int): An integer representing the size of the groups to reverse.

Output:
  `return` (list of integers): A list of integers representing the values in the linked list after reversing nodes in k-group.","# import necessary packages
# No external packages are required for the given problem.

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# main function
def main_solution(head, k):
    # Convert the input list represented as a list of integers to a linked list
    def create_linked_list(arr):
        if not arr:
            return None
        head = ListNode(arr[0])
        current = head
        for value in arr[1:]:
            current.next = ListNode(value)
            current = current.next
        return head
    
    # Convert the linked list back to a list for output
    def linked_list_to_list(node):
        result = []
        while node:
            result.append(node.val)
            node = node.next
        return result

    # Length of the linked list
    def length(root):
        itr = root
        a = 0
        while itr:
            itr = itr.next
            a += 1
        return a

    # Reverse the nodes in k-group
    def reverse(head, k, l):
        if l < k:
            return head
        c = 0
        prev = None
        curr = head
        while c < k and curr is not None:
            nex = curr.next
            curr.next = prev
            prev = curr
            curr = nex
            c += 1
        if curr is not None:
            head.next = reverse(curr, k, l - k)
        return prev

    # Convert head input to linked list
    head = create_linked_list(head)
    
    # Call the reverseKGroup logic
    new_head = reverse(head, k, length(head))
    
    # Convert the output linked list back to a list
    return linked_list_to_list(new_head)","import random

def input_generator():
    head_length = random.randint(1, 10)  # Length of the linked list between 1 and 10
    head = [random.randint(1, 100) for _ in range(head_length)]  # Random integers for linked list values
    k = random.randint(1, 5)  # Random k value between 1 and 5
    return {""head"": head, ""k"": k}","[({'head': [98, 86, 95, 20, 82], 'k': 3}, [95, 86, 98, 20, 82]), ({'head': [68, 47, 10, 20, 19, 49], 'k': 5}, [19, 20, 10, 47, 68, 49]), ({'head': [19], 'k': 2}, [19]), ({'head': [12, 70, 72, 62], 'k': 2}, [70, 12, 62, 72]), ({'head': [44, 49], 'k': 5}, [44, 49])]","In a linked list, nodes can be reversed in groups of a specified size. Given a list of integers representing the values in the linked list and an integer representing the size of the groups, how can you determine the new order of the nodes after reversing them in groups of that size? Please specify the linked list values as `head` and the group size as `k`, and return the resulting order of the linked list values after the operations.

The input and output requirements are as follows:

Input:
  `head` (list of integers): A list of integers representing the values in the linked list.
  `k` (int): An integer representing the size of the groups to reverse.

Output:
  `return` (list of integers): A list of integers representing the values in the linked list after reversing nodes in k-group.

Examples:
Input: {""head"": [98, 86, 95, 20, 82], ""k"": 3}
Output: [95, 86, 98, 20, 82]
Input: {""head"": [68, 47, 10, 20, 19, 49], ""k"": 5}
Output: [19, 20, 10, 47, 68, 49]
Input: {""head"": [19], ""k"": 2}
Output: [19]
Input: {""head"": [12, 70, 72, 62], ""k"": 2}
Output: [70, 12, 62, 72]
Input: {""head"": [44, 49], ""k"": 5}
Output: [44, 49]"
"In a certain scenario, you are tasked with identifying unique sets of three items from a collection of integers that, when combined, yield a total sum of zero. Given a list of integers named `nums`, what unique triplets can be found that satisfy this condition, ensuring that no duplicate combinations are included in the final result?

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of integers to find unique triplets that sum up to zero.

Output:
  `return` (List[List[int]]): A list of unique triplets, where each triplet is a list of three integers that sum to zero.","# import necessary packages
from typing import List

# all class and function definitions in the code file, if any
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        ans = []
        nums.sort()
        if not nums or nums[0] > 0 or nums[len(nums) - 1] < 0:
            return []
        for a in range(len(nums) - 2):
            if nums[a] > 0:
                break
            if a > 0 and nums[a] == nums[a - 1]:
                continue
            i, j = a + 1, len(nums) - 1
            while i < j:
                val = nums[a] + nums[i] + nums[j]
                if val < 0:
                    i += 1
                elif val > 0:
                    j -= 1
                else:
                    ans.append([nums[a], nums[i], nums[j]])
                    while i < j and nums[i] == nums[i + 1]:
                        i += 1
                    while i < j and nums[j] == nums[j - 1]:
                        j -= 1
                    i += 1
                    j -= 1
        return ans

# main function
def main_solution(nums):
    # Convert input to list of integers
    nums = list(map(int, nums))  
    # Initialize the Solution class
    solution = Solution()
    # Call the threeSum method and get the result
    result = solution.threeSum(nums)
    # Convert result to JSON serializable format
    return [list(triplet) for triplet in result]","import random

def input_generator():
    # Generate a random list of integers
    nums = random.sample(range(-10, 11), random.randint(3, 10))  # Random length between 3 and 10
    return {""nums"": nums}","[({'nums': [9, -1, 0]}, []), ({'nums': [-10, 8, 3, 2, 4, 6, 9, -9, 10, -7]}, [[-10, 2, 8], [-10, 4, 6], [-9, 3, 6], [-7, 3, 4]]), ({'nums': [1, -5, -8, 8, 4, 3, -6, 9, -7, -3]}, [[-7, 3, 4], [-6, -3, 9], [-5, -3, 8], [-5, 1, 4]]), ({'nums': [-3, -7, 4, 8, 3, -1, -10]}, [[-7, -1, 8], [-7, 3, 4], [-3, -1, 4]]), ({'nums': [6, 7, 1, 3, -6]}, [])]","In a certain scenario, you are tasked with identifying unique sets of three items from a collection of integers that, when combined, yield a total sum of zero. Given a list of integers named `nums`, what unique triplets can be found that satisfy this condition, ensuring that no duplicate combinations are included in the final result?

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of integers to find unique triplets that sum up to zero.

Output:
  `return` (List[List[int]]): A list of unique triplets, where each triplet is a list of three integers that sum to zero.

Examples:
Input: {""nums"": [9, -1, 0]}
Output: []
Input: {""nums"": [-10, 8, 3, 2, 4, 6, 9, -9, 10, -7]}
Output: [[-10, 2, 8], [-10, 4, 6], [-9, 3, 6], [-7, 3, 4]]
Input: {""nums"": [1, -5, -8, 8, 4, 3, -6, 9, -7, -3]}
Output: [[-7, 3, 4], [-6, -3, 9], [-5, -3, 8], [-5, 1, 4]]
Input: {""nums"": [-3, -7, 4, 8, 3, -1, -10]}
Output: [[-7, -1, 8], [-7, 3, 4], [-3, -1, 4]]
Input: {""nums"": [6, 7, 1, 3, -6]}
Output: []"
"In a given N x N grid representing a map, each cell is marked with either 0 (representing ocean) or 1 (representing land). Can you determine what the maximum distance is from any ocean cell to the nearest land cell, measured using Manhattan distance? The grid is to be provided as the variable `grid`, and the output should be the calculated maximum distance. If the grid consists solely of land or solely of ocean, the result should return -1.

The input and output requirements are as follows:

Input:
  `grid` (List[List[int]]): A 2D list representing the map, where each element is either 0 (ocean) or 1 (land). The size of the grid should be N x N, where N is a positive integer.

Output:
  `return` (int): The maximum distance from the ocean to the nearest land using Manhattan distance. If the grid contains only land or only ocean, return -1.","# import necessary packages
from typing import List

# all class and function definitions in the code file, if any
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        import numpy as np
        if len(set(np.array(grid).flatten())) == 1:
            return -1
        else:
            step = 0
            m = len(grid)
            n = len(grid[0])
            queue = []
            for x, line in enumerate(grid):
                for y, item in enumerate(line):
                    if item == 1:
                        queue.append([x, y])

            while len(set(np.array(grid).flatten())) != 1:
                new_queue = []
                for q in queue:
                    for dx, dy in [[0, 1], [0, -1], [1, 0], [-1, 0]]:
                        if 0 <= q[0] + dx < m and 0 <= q[1] + dy < n:
                            if grid[q[0] + dx][q[1] + dy] == 0:
                                grid[q[0] + dx][q[1] + dy] = 1
                                new_queue.append([q[0] + dx, q[1] + dy])
                queue = new_queue
                step += 1
            return step

# main function
def main_solution(grid: List[List[int]]) -> int:
    # all input arguments of the main_solution function should be json serializable (no self-defined objects, functions, np.array, set, tuple, etc.)
    solution = Solution()
    result = solution.maxDistance(grid)
    # return, the returned value must be json serializable (no self-defined objects, functions, np.array, set, tuple, etc.)
    return result","import random

def input_generator():
    N = random.randint(1, 10)  # random size between 1 and 10
    grid = [[random.choice([0, 1]) for _ in range(N)] for _ in range(N)]
    # Ensure there is at least one land and one ocean in the grid
    if sum(sum(row) for row in grid) == 0 or sum(sum(row) for row in grid) == N * N:
        grid[random.randint(0, N-1)][random.randint(0, N-1)] = 1  # Ensure at least one land
        grid[random.randint(0, N-1)][random.randint(0, N-1)] = 0  # Ensure at least one ocean
    return {""grid"": grid}","[({'grid': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]}, 2)]","In a given N x N grid representing a map, each cell is marked with either 0 (representing ocean) or 1 (representing land). Can you determine what the maximum distance is from any ocean cell to the nearest land cell, measured using Manhattan distance? The grid is to be provided as the variable `grid`, and the output should be the calculated maximum distance. If the grid consists solely of land or solely of ocean, the result should return -1.

The input and output requirements are as follows:

Input:
  `grid` (List[List[int]]): A 2D list representing the map, where each element is either 0 (ocean) or 1 (land). The size of the grid should be N x N, where N is a positive integer.

Output:
  `return` (int): The maximum distance from the ocean to the nearest land using Manhattan distance. If the grid contains only land or only ocean, return -1.

Examples:
Input: {""grid"": [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]}
Output: 2"
"In a digital library, users often search for specific books using their unique identification numbers. Given a list of identification numbers that may be sorted in either ascending or descending order, how can you efficiently determine the position of a specific book identified by its number? 

You need to find the index of the book identified by `target` in the list of `arr`. If the book is not found, return -1.

The input and output requirements are as follows:

Input:
  `arr` (list of int): A list of integers, which may be sorted in ascending or descending order.
  `target` (int): The integer value to search for in the list.

Output:
  `return` (int): The index of the target integer in the list if found; otherwise, return -1.","# import necessary packages
import json

# all class and function definitions in the code file, if any
# they will be used in the main_solution function, you may need to modify them to meet the requirements of the main_solution function (optional)

def binary_search(arr, target, start, end):
    midpoint = (start + end) // 2
    if start > end:
        return -1
    if arr[midpoint] == target:
        return midpoint

    if arr[midpoint] > target:
        return binary_search(arr, target, start, midpoint - 1)
    else:
        return binary_search(arr, target, midpoint + 1, end)

def agnostic_binary_search(arr, target):
    isAsc, start, end = False, 0, len(arr) - 1
    if len(arr) >= 2:
        if arr[0] < arr[-1]:
            isAsc = True

    while start <= end:
        midpoint = (start + end) // 2
        if arr[midpoint] == target:
            return midpoint
        if isAsc:
            if arr[midpoint] > target:
                end = midpoint - 1
            else:
                start = midpoint + 1
        else:
            if arr[midpoint] > target:
                start = midpoint + 1
            else:
                end = midpoint - 1
    return -1

# main function
def main_solution(arr, target):
    # Convert input to appropriate types
    if len(arr) == 0:
        return -1  # If the array is empty, return -1
    # Call the agnostic binary search function
    index = agnostic_binary_search(arr, target)
    # return, the returned value must be json serializable (no self-defined objects, functions, np.array, set, tuple, etc.)
    return index","import random

def input_generator():
    # Generate a random list of integers
    arr_length = random.randint(1, 10)  # Random length between 1 and 10
    arr = random.sample(range(-100, 100), arr_length)  # Unique integers between -100 and 100
    target = random.choice(arr)  # Randomly select a target from the array
    return {""arr"": arr, ""target"": target}","[({'arr': [49, 65, -19, 38, 34, -98, 96, -76], 'target': -98}, 5), ({'arr': [-84, 32, -86, 73, -44, 35, 34, 81], 'target': -84}, 0), ({'arr': [6, 13], 'target': 13}, 1), ({'arr': [-59, -14, 31, -70, 99, -87, -79, 29], 'target': -14}, -1), ({'arr': [-98, 58, -83, -95], 'target': -98}, 0)]","In a digital library, users often search for specific books using their unique identification numbers. Given a list of identification numbers that may be sorted in either ascending or descending order, how can you efficiently determine the position of a specific book identified by its number? 

You need to find the index of the book identified by `target` in the list of `arr`. If the book is not found, return -1.

The input and output requirements are as follows:

Input:
  `arr` (list of int): A list of integers, which may be sorted in ascending or descending order.
  `target` (int): The integer value to search for in the list.

Output:
  `return` (int): The index of the target integer in the list if found; otherwise, return -1.

Examples:
Input: {""arr"": [49, 65, -19, 38, 34, -98, 96, -76], ""target"": -98}
Output: 5
Input: {""arr"": [-84, 32, -86, 73, -44, 35, 34, 81], ""target"": -84}
Output: 0
Input: {""arr"": [6, 13], ""target"": 13}
Output: 1
Input: {""arr"": [-59, -14, 31, -70, 99, -87, -79, 29], ""target"": -14}
Output: -1
Input: {""arr"": [-98, 58, -83, -95], ""target"": -98}
Output: 0"
"In a given N x N grid representing a map, each cell is marked with either 0 (representing ocean) or 1 (representing land). Can you determine what the maximum distance is from any ocean cell to the nearest land cell, measured using Manhattan distance? The grid is to be provided as the variable `grid`, and the output should be the calculated maximum distance. If the grid consists solely of land or solely of ocean, the result should return -1.

The input and output requirements are as follows:

Input:
  `grid` (List[List[int]]): A 2D list representing the map, where each element is either 0 (ocean) or 1 (land). The size of the grid should be N x N, where N is a positive integer.

Output:
  `return` (int): The maximum distance from the ocean to the nearest land using Manhattan distance. If the grid contains only land or only ocean, return -1.","# import necessary packages
from typing import List

# all class and function definitions in the code file, if any
class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        import numpy as np
        if len(set(np.array(grid).flatten())) == 1:
            return -1
        else:
            step = 0
            m = len(grid)
            n = len(grid[0])
            queue = []
            for x, line in enumerate(grid):
                for y, item in enumerate(line):
                    if item == 1:
                        queue.append([x, y])

            while len(set(np.array(grid).flatten())) != 1:
                new_queue = []
                for q in queue:
                    for dx, dy in [[0, 1], [0, -1], [1, 0], [-1, 0]]:
                        if 0 <= q[0] + dx < m and 0 <= q[1] + dy < n:
                            if grid[q[0] + dx][q[1] + dy] == 0:
                                grid[q[0] + dx][q[1] + dy] = 1
                                new_queue.append([q[0] + dx, q[1] + dy])
                queue = new_queue
                step += 1
            return step

# main function
def main_solution(grid: List[List[int]]) -> int:
    # all input arguments of the main_solution function should be json serializable (no self-defined objects, functions, np.array, set, tuple, etc.)
    solution = Solution()
    result = solution.maxDistance(grid)
    # return, the returned value must be json serializable (no self-defined objects, functions, np.array, set, tuple, etc.)
    return result","import random

def input_generator():
    N = random.randint(1, 10)  # random size between 1 and 10
    grid = [[random.choice([0, 1]) for _ in range(N)] for _ in range(N)]
    # Ensure there is at least one land and one ocean in the grid
    if sum(sum(row) for row in grid) == 0 or sum(sum(row) for row in grid) == N * N:
        grid[random.randint(0, N-1)][random.randint(0, N-1)] = 1  # Ensure at least one land
        grid[random.randint(0, N-1)][random.randint(0, N-1)] = 0  # Ensure at least one ocean
    return {""grid"": grid}","[({'grid': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}, 2), ({'grid': [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}, 2)]","In a given N x N grid representing a map, each cell is marked with either 0 (representing ocean) or 1 (representing land). Can you determine what the maximum distance is from any ocean cell to the nearest land cell, measured using Manhattan distance? The grid is to be provided as the variable `grid`, and the output should be the calculated maximum distance. If the grid consists solely of land or solely of ocean, the result should return -1.

The input and output requirements are as follows:

Input:
  `grid` (List[List[int]]): A 2D list representing the map, where each element is either 0 (ocean) or 1 (land). The size of the grid should be N x N, where N is a positive integer.

Output:
  `return` (int): The maximum distance from the ocean to the nearest land using Manhattan distance. If the grid contains only land or only ocean, return -1.

Examples:
Input: {""grid"": [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}
Output: 2
Input: {""grid"": [[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]}
Output: 2"
"In a certain scenario, you are tasked with identifying unique sets of three items from a collection of integers that, when combined, yield a total sum of zero. Given a list of integers named `nums`, what unique triplets can be found that satisfy this condition, ensuring that no duplicate combinations are included in the final result?

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of integers to find unique triplets that sum up to zero.

Output:
  `return` (List[List[int]]): A list of unique triplets, where each triplet is a list of three integers that sum to zero.","# import necessary packages
from typing import List

# all class and function definitions in the code file, if any
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        ans = []
        nums.sort()
        if not nums or nums[0] > 0 or nums[len(nums) - 1] < 0:
            return []
        for a in range(len(nums) - 2):
            if nums[a] > 0:
                break
            if a > 0 and nums[a] == nums[a - 1]:
                continue
            i, j = a + 1, len(nums) - 1
            while i < j:
                val = nums[a] + nums[i] + nums[j]
                if val < 0:
                    i += 1
                elif val > 0:
                    j -= 1
                else:
                    ans.append([nums[a], nums[i], nums[j]])
                    while i < j and nums[i] == nums[i + 1]:
                        i += 1
                    while i < j and nums[j] == nums[j - 1]:
                        j -= 1
                    i += 1
                    j -= 1
        return ans

# main function
def main_solution(nums):
    # Convert input to list of integers
    nums = list(map(int, nums))  
    # Initialize the Solution class
    solution = Solution()
    # Call the threeSum method and get the result
    result = solution.threeSum(nums)
    # Convert result to JSON serializable format
    return [list(triplet) for triplet in result]","import random

def input_generator():
    # Generate a random list of integers
    nums = random.sample(range(-10, 11), random.randint(3, 10))  # Random length between 3 and 10
    return {""nums"": nums}","[({'nums': [-7, -4, -8, 5, 2, 3, 4, 10]}, [[-8, 3, 5], [-7, 2, 5], [-7, 3, 4]]), ({'nums': [7, 3, -1]}, []), ({'nums': [8, 1, 2, -6, 7, -3, 4]}, [[-6, 2, 4], [-3, 1, 2]]), ({'nums': [4, 7, -9, -7, -4, -5, 2, 6, -2, 1]}, [[-9, 2, 7], [-7, 1, 6], [-5, -2, 7], [-5, 1, 4], [-4, -2, 6]]), ({'nums': [2, -4, 4, -3, 8, 1, 0]}, [[-4, 0, 4], [-3, 1, 2]])]","In a certain scenario, you are tasked with identifying unique sets of three items from a collection of integers that, when combined, yield a total sum of zero. Given a list of integers named `nums`, what unique triplets can be found that satisfy this condition, ensuring that no duplicate combinations are included in the final result?

The input and output requirements are as follows:

Input:
  `nums` (List[int]): A list of integers to find unique triplets that sum up to zero.

Output:
  `return` (List[List[int]]): A list of unique triplets, where each triplet is a list of three integers that sum to zero.

Examples:
Input: {""nums"": [-7, -4, -8, 5, 2, 3, 4, 10]}
Output: [[-8, 3, 5], [-7, 2, 5], [-7, 3, 4]]
Input: {""nums"": [7, 3, -1]}
Output: []
Input: {""nums"": [8, 1, 2, -6, 7, -3, 4]}
Output: [[-6, 2, 4], [-3, 1, 2]]
Input: {""nums"": [4, 7, -9, -7, -4, -5, 2, 6, -2, 1]}
Output: [[-9, 2, 7], [-7, 1, 6], [-5, -2, 7], [-5, 1, 4], [-4, -2, 6]]
Input: {""nums"": [2, -4, 4, -3, 8, 1, 0]}
Output: [[-4, 0, 4], [-3, 1, 2]]"
"In a computer science class, students are learning about binary representations of numbers. They discovered that powers of two have a unique property: in their binary form, they consist of a single '1' followed by a certain number of '0's. For instance, the number 8 is represented as '1000' in binary. 

To help the students, can you determine whether a given integer `n` is a power of two? What will be the result when you check if `n` is a power of two?

The input and output requirements are as follows:

Input:
  `n` (int): The integer to be checked, must be greater than or equal to 0.
Output:
  `return` (bool): True if `n` is a power of two, otherwise False.","# import necessary packages
import unittest

# all class and function definitions in the code file, if any
# they will be used in the main_solution function, you may need to modify them to meet the requirements of the main_solution function (optional)

class Solution(object):
    def isPowerOfTwo(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""
        return n & (n - 1) == 0

# main function
def main_solution(n):
    """"""
    Determines if the given integer n is a power of two.
    
    Input:
      n (int): The integer to be checked, must be greater than or equal to 0.

    Output:
      return (bool): True if n is a power of two, otherwise False.
    """"""
    # Ensure the input is a non-negative integer
    n = int(n)
    sol = Solution()
    return sol.isPowerOfTwo(n)","import random

def input_generator():
    # generate input arguments for the main_solution function
    n = random.randint(0, 100)  # generating a random integer between 0 and 100
    return {""n"": n}","[({'n': 57}, False), ({'n': 96}, False), ({'n': 56}, False), ({'n': 18}, False), ({'n': 88}, False)]","In a computer science class, students are learning about binary representations of numbers. They discovered that powers of two have a unique property: in their binary form, they consist of a single '1' followed by a certain number of '0's. For instance, the number 8 is represented as '1000' in binary. 

To help the students, can you determine whether a given integer `n` is a power of two? What will be the result when you check if `n` is a power of two?

The input and output requirements are as follows:

Input:
  `n` (int): The integer to be checked, must be greater than or equal to 0.
Output:
  `return` (bool): True if `n` is a power of two, otherwise False.

Examples:
Input: {""n"": 57}
Output: false
Input: {""n"": 96}
Output: false
Input: {""n"": 56}
Output: false
Input: {""n"": 18}
Output: false
Input: {""n"": 88}
Output: false"
"In a computer science class, students are learning about binary representations of numbers. They discovered that powers of two have a unique property: in their binary form, they consist of a single '1' followed by a certain number of '0's. For instance, the number 8 is represented as '1000' in binary. 

To help the students, can you determine whether a given integer `n` is a power of two? What will be the result when you check if `n` is a power of two?

The input and output requirements are as follows:

Input:
  `n` (int): The integer to be checked, must be greater than or equal to 0.
Output:
  `return` (bool): True if `n` is a power of two, otherwise False.","# import necessary packages
import unittest

# all class and function definitions in the code file, if any
# they will be used in the main_solution function, you may need to modify them to meet the requirements of the main_solution function (optional)

class Solution(object):
    def isPowerOfTwo(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""
        return n & (n - 1) == 0

# main function
def main_solution(n):
    """"""
    Determines if the given integer n is a power of two.
    
    Input:
      n (int): The integer to be checked, must be greater than or equal to 0.

    Output:
      return (bool): True if n is a power of two, otherwise False.
    """"""
    # Ensure the input is a non-negative integer
    n = int(n)
    sol = Solution()
    return sol.isPowerOfTwo(n)","import random

def input_generator():
    # generate input arguments for the main_solution function
    n = random.randint(0, 100)  # generating a random integer between 0 and 100
    return {""n"": n}","[({'n': 30}, False), ({'n': 1}, True), ({'n': 56}, False), ({'n': 0}, True), ({'n': 42}, False)]","In a computer science class, students are learning about binary representations of numbers. They discovered that powers of two have a unique property: in their binary form, they consist of a single '1' followed by a certain number of '0's. For instance, the number 8 is represented as '1000' in binary. 

To help the students, can you determine whether a given integer `n` is a power of two? What will be the result when you check if `n` is a power of two?

The input and output requirements are as follows:

Input:
  `n` (int): The integer to be checked, must be greater than or equal to 0.
Output:
  `return` (bool): True if `n` is a power of two, otherwise False.

Examples:
Input: {""n"": 30}
Output: false
Input: {""n"": 1}
Output: true
Input: {""n"": 56}
Output: false
Input: {""n"": 0}
Output: true
Input: {""n"": 42}
Output: false"
"In a computer science class, students are learning about binary representations of numbers. They discovered that powers of two have a unique property: in their binary form, they consist of a single '1' followed by a certain number of '0's. For instance, the number 8 is represented as '1000' in binary. 

To help the students, can you determine whether a given integer `n` is a power of two? What will be the result when you check if `n` is a power of two?

The input and output requirements are as follows:

Input:
  `n` (int): The integer to be checked, must be greater than or equal to 0.
Output:
  `return` (bool): True if `n` is a power of two, otherwise False.","# import necessary packages
import unittest

# all class and function definitions in the code file, if any
# they will be used in the main_solution function, you may need to modify them to meet the requirements of the main_solution function (optional)

class Solution(object):
    def isPowerOfTwo(self, n):
        """"""
        :type n: int
        :rtype: bool
        """"""
        return n & (n - 1) == 0

# main function
def main_solution(n):
    """"""
    Determines if the given integer n is a power of two.
    
    Input:
      n (int): The integer to be checked, must be greater than or equal to 0.

    Output:
      return (bool): True if n is a power of two, otherwise False.
    """"""
    # Ensure the input is a non-negative integer
    n = int(n)
    sol = Solution()
    return sol.isPowerOfTwo(n)","import random

def input_generator():
    # generate input arguments for the main_solution function
    n = random.randint(0, 100)  # generating a random integer between 0 and 100
    return {""n"": n}","[({'n': 28}, False), ({'n': 56}, False), ({'n': 4}, True), ({'n': 6}, False), ({'n': 54}, False)]","In a computer science class, students are learning about binary representations of numbers. They discovered that powers of two have a unique property: in their binary form, they consist of a single '1' followed by a certain number of '0's. For instance, the number 8 is represented as '1000' in binary. 

To help the students, can you determine whether a given integer `n` is a power of two? What will be the result when you check if `n` is a power of two?

The input and output requirements are as follows:

Input:
  `n` (int): The integer to be checked, must be greater than or equal to 0.
Output:
  `return` (bool): True if `n` is a power of two, otherwise False.

Examples:
Input: {""n"": 28}
Output: false
Input: {""n"": 56}
Output: false
Input: {""n"": 4}
Output: true
Input: {""n"": 6}
Output: false
Input: {""n"": 54}
Output: false"
